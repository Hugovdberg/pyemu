import os
import sys
import platform

# sys.path.append(os.path.join("..","pyemu"))
import pyemu
from pyemu import os_utils
from pyemu.utils import PstFrom
import shutil

ext = ''
bin_path = os.path.join("..", "..", "bin")
if "linux" in platform.platform().lower():
    bin_path = os.path.join(bin_path, "linux")
elif "darwin" in platform.platform().lower():
    bin_path = os.path.join(bin_path, "mac")
else:
    bin_path = os.path.join(bin_path, "win")
    ext = '.exe'

mf_exe_path = os.path.join(bin_path, "mfnwt")
mt_exe_path = os.path.join(bin_path, "mt3dusgs")
mf6_exe_path = os.path.join(bin_path, "mf6")
pp_exe_path = os.path.join(bin_path, "pestpp")
ies_exe_path = os.path.join(bin_path, "pestpp-ies")
swp_exe_path = os.path.join(bin_path, "pestpp-swp")

mf_exe_name = os.path.basename(mf_exe_path)
mf6_exe_name = os.path.basename(mf6_exe_path)


def freyberg_test():
    import numpy as np
    import pandas as pd
    pd.set_option('display.max_rows', 500)
    pd.set_option('display.max_columns', 500)
    pd.set_option('display.width', 1000)
    try:
        import flopy
    except:
        return

    org_model_ws = os.path.join("..", "examples", "freyberg_sfr_update")
    nam_file = "freyberg.nam"
    m = flopy.modflow.Modflow.load(nam_file, model_ws=org_model_ws,
                                   check=False, forgive=False,
                                   exe_name=mf_exe_path)
    flopy.modflow.ModflowRiv(m, stress_period_data={
        0: [[0, 0, 0, m.dis.top.array[0, 0], 1.0, m.dis.botm.array[0, 0, 0]],
            [0, 0, 1, m.dis.top.array[0, 1], 1.0, m.dis.botm.array[0, 0, 1]],
            [0, 0, 1, m.dis.top.array[0, 1], 1.0, m.dis.botm.array[0, 0, 1]]]})

    org_model_ws = "temp_pst_from"
    if os.path.exists(org_model_ws):
        shutil.rmtree(org_model_ws)
    m.external_path = "."
    m.change_model_ws(org_model_ws)
    m.write_input()
    print("{0} {1}".format(mf_exe_path, m.name + ".nam"), org_model_ws)
    os_utils.run("{0} {1}".format(mf_exe_path, m.name + ".nam"),
                 cwd=org_model_ws)
    hds_kperk = []
    for k in range(m.nlay):
        for kper in range(m.nper):
            hds_kperk.append([kper, k])
    hds_runline, df = pyemu.gw_utils.setup_hds_obs(
        os.path.join(m.model_ws, f"{m.name}.hds"), kperk_pairs=None, skip=None,
        prefix="hds", include_path=False)

    sfo = flopy.utils.SfrFile(os.path.join(m.model_ws, 'freyberg.sfr.out'))
    sfodf = sfo.get_dataframe()
    sfodf[['kstp', 'kper']] = pd.DataFrame(sfodf.kstpkper.to_list(),
                                           index=sfodf.index)
    sfodf = sfodf.drop('kstpkper', axis=1)
    # just adding a bit of header in for test purposes
    sfo_pp_file = os.path.join(m.model_ws, 'freyberg.sfo.dat')
    with open(sfo_pp_file, 'w') as fp:
        fp.writelines(["This is a post processed sfr output file\n",
                      "Processed into tabular form using the lines:\n",
                      "sfo = flopy.utils.SfrFile('freyberg.sfr.out')\n",
                      "sfo.get_dataframe().to_csv('freyberg.sfo.dat')\n"])
        sfodf.sort_index(1).to_csv(fp, sep=' ', index_label='idx')
    sfodf.sort_index(1).to_csv(os.path.join(m.model_ws, 'freyberg.sfo.csv'),
                 index_label='idx')
    template_ws = "new_temp"
    # sr0 = m.sr
    sr = pyemu.helpers.SpatialReference.from_namfile(
        os.path.join(m.model_ws, m.namefile),
        delr=m.dis.delr, delc=m.dis.delc)
    # set up PstFrom object
    pf = PstFrom(original_d=org_model_ws, new_d=template_ws,
                 remove_existing=True,
                 longnames=True, spatial_reference=sr,
                 zero_based=False)
    # obs
    #   using tabular style model output
    #   (generated by pyemu.gw_utils.setup_hds_obs())
    pf.add_observations('freyberg.hds.dat', insfile='freyberg.hds.dat.ins2',
                        index_cols='obsnme', use_cols='obsval', prefix='hds')
    #   using the ins file generated by pyemu.gw_utils.setup_hds_obs()
    pf.add_observations_from_ins(ins_file='freyberg.hds.dat.ins')
    pf.post_py_cmds.append(hds_runline)
    pf.tmp_files.append(f"{m.name}.hds")
    # sfr outputs to obs
    sfr_idx = ['segment', 'reach', 'kstp', 'kper']
    sfr_use = ["Qaquifer", "Qout", 'width']
    pf.add_observations('freyberg.sfo.dat', insfile=None,
                        index_cols=sfr_idx,
                        use_cols=sfr_use, prefix='sfr',
                        ofile_skip=4, ofile_sep=' ', use_rows=np.arange(0, 50))
    # check obs set up
    sfrobs = pf.obs_dfs[-1].copy()
    sfrobs[['usecol'] + sfr_idx] = sfrobs.obsnme.apply(
        lambda x: pd.Series(
            dict([s.split(':') for s in x.split('_') if ':' in s])))
    sfrobs.loc[:, sfr_idx] = sfrobs.loc[:, sfr_idx].astype(int)
    sfrobs_p = sfrobs.pivot_table(index=sfr_idx,
                                  columns=['usecol'], values='obsval')
    sfodf_c = sfodf.set_index(sfr_idx).sort_index()
    sfodf_c.columns = sfodf_c.columns.str.lower()
    assert (sfrobs_p == sfodf_c.loc[sfrobs_p.index,
                                    sfrobs_p.columns]).all().all(), (
        "Mis-match between expected and processed obs values")

    pf.tmp_files.append(f"{m.name}.sfr.out")
    pf.extra_py_imports.append('flopy')
    pf.post_py_cmds.extend(
        ["sfo_pp_file = 'freyberg.sfo.dat'",
         "sfo = flopy.utils.SfrFile('freyberg.sfr.out')",
         "sfodf = sfo.get_dataframe()",
         "sfodf[['kstp', 'kper']] = pd.DataFrame(sfodf.kstpkper.to_list(), index=sfodf.index)",
         "sfodf = sfodf.drop('kstpkper', axis=1)",
         "with open(sfo_pp_file, 'w') as fp:",
         "    fp.writelines(['This is a post processed sfr output file\\n', "
         "'Processed into tabular form using the lines:\\n', "
         "'sfo = flopy.utils.SfrFile(`freyberg.sfr.out`)\\n', "
         "'sfo.get_dataframe().to_csv(`freyberg.sfo.dat`)\\n'])",
         "    sfodf.sort_index(1).to_csv(fp, sep=' ', index_label='idx')"])
    # csv version of sfr obs
    # sfr outputs to obs
    pf.add_observations('freyberg.sfo.csv', insfile=None,
                        index_cols=['segment', 'reach', 'kstp', 'kper'],
                        use_cols=["Qaquifer", "Qout", "width"], prefix='sfr2',
                        ofile_sep=',', obsgp=['qaquifer', 'qout', "width"],
                        use_rows=np.arange(50, 101))
    # check obs set up
    sfrobs = pf.obs_dfs[-1].copy()
    sfrobs[['usecol'] + sfr_idx] = sfrobs.obsnme.apply(
        lambda x: pd.Series(
            dict([s.split(':') for s in x.split('_') if ':' in s])))
    sfrobs.loc[:, sfr_idx] = sfrobs.loc[:, sfr_idx].astype(int)
    sfrobs_p = sfrobs.pivot_table(index=sfr_idx,
                                  columns=['usecol'], values='obsval')
    sfodf_c = sfodf.set_index(sfr_idx).sort_index()
    sfodf_c.columns = sfodf_c.columns.str.lower()
    assert (sfrobs_p == sfodf_c.loc[sfrobs_p.index,
                                    sfrobs_p.columns]).all().all(), (
        "Mis-match between expected and processed obs values")
    obsnmes = pd.concat([df.obgnme for df in pf.obs_dfs]).unique()
    assert all([gp in obsnmes for gp in ['qaquifer', 'qout']])
    pf.post_py_cmds.append(
        "sfodf.sort_index(1).to_csv('freyberg.sfo.csv', sep=',', index_label='idx')")

    # pars
    pf.add_parameters(filenames="RIV_0000.dat", par_type="grid",
                      index_cols=[0, 1, 2], use_cols=[3, 5],
                      par_name_base=["rivstage_grid", "rivbot_grid"],
                      mfile_fmt='%10d%10d%10d %15.8F %15.8F %15.8F',
                      pargp='rivbot')
    pf.add_parameters(filenames="RIV_0000.dat", par_type="grid",
                      index_cols=[0, 1, 2], use_cols=4)
    pf.add_parameters(filenames=["WEL_0000.dat", "WEL_0001.dat"],
                      par_type="grid", index_cols=[0, 1, 2], use_cols=3,
                      par_name_base="welflux_grid",
                      zone_array=m.bas6.ibound.array)
    pf.add_parameters(filenames=["WEL_0000.dat"], par_type="constant",
                      index_cols=[0, 1, 2], use_cols=3,
                      par_name_base=["flux_const"])
    pf.add_parameters(filenames="rech_1.ref", par_type="grid",
                      zone_array=m.bas6.ibound[0].array,
                      par_name_base="rch_datetime:1-1-1970")
    pf.add_parameters(filenames=["rech_1.ref", "rech_2.ref"],
                      par_type="zone", zone_array=m.bas6.ibound[0].array)
    pf.add_parameters(filenames="rech_1.ref", par_type="pilot_point",
                      zone_array=m.bas6.ibound[0].array,
                      par_name_base="rch_datetime:1-1-1970", pp_space=4)
    pf.add_parameters(filenames="rech_1.ref", par_type="pilot_point",
                      zone_array=m.bas6.ibound[0].array,
                      par_name_base="rch_datetime:1-1-1970", pp_space=1,
                      ult_ubound=100, ult_lbound=0.0)

    # add model run command
    pf.mod_sys_cmds.append("{0} {1}".format(mf_exe_name, m.name + ".nam"))
    print(pf.mult_files)
    print(pf.org_files)


    # build pest
    pst = pf.build_pst('freyberg.pst')

    # check mult files are in pst input files
    csv = os.path.join(template_ws, "mult2model_info.csv")
    df = pd.read_csv(csv, index_col=0)
    mults_not_linked_to_pst = ((set(df.mlt_file.unique()) -
                                set(pst.input_files)) -
                               set(df.loc[df.pp_file.notna()].mlt_file))
    assert len(mults_not_linked_to_pst) == 0, print(mults_not_linked_to_pst)

    pst.write_input_files(pst_path=pf.new_d)
    # test par mults are working
    b_d = os.getcwd()
    os.chdir(pf.new_d)
    try:
        pyemu.helpers.apply_list_and_array_pars(
            arr_par_file="mult2model_info.csv")
    except Exception as e:
        os.chdir(b_d)
        raise Exception(str(e))
    os.chdir(b_d)

    pst.control_data.noptmax = 0
    pst.write(os.path.join(pf.new_d, "freyberg.pst"))
    pyemu.os_utils.run("{0} freyberg.pst".format(ies_exe_path), cwd=pf.new_d)

    res_file = os.path.join(pf.new_d, "freyberg.base.rei")
    assert os.path.exists(res_file), res_file
    pst.set_res(res_file)
    print(pst.phi)
    assert pst.phi < 1.0e-5, pst.phi


def freyberg_prior_build_test():
    import numpy as np
    import pandas as pd
    pd.set_option('display.max_rows', 500)
    pd.set_option('display.max_columns', 500)
    pd.set_option('display.width', 1000)
    try:
        import flopy
    except:
        return

    org_model_ws = os.path.join("..", "examples", "freyberg_sfr_update")
    nam_file = "freyberg.nam"
    m = flopy.modflow.Modflow.load(nam_file, model_ws=org_model_ws,
                                   check=False, forgive=False,
                                   exe_name=mf_exe_path)
    flopy.modflow.ModflowRiv(m, stress_period_data={
        0: [[0, 0, 0, m.dis.top.array[0, 0], 1.0, m.dis.botm.array[0, 0, 0]],
            [0, 0, 1, m.dis.top.array[0, 1], 1.0, m.dis.botm.array[0, 0, 1]],
            [0, 0, 1, m.dis.top.array[0, 1], 1.0, m.dis.botm.array[0, 0, 1]]]})

    welsp = m.wel.stress_period_data.data.copy()
    addwell = welsp[0].copy()
    addwell['k'] = 1
    welsp[0] = np.rec.array(np.concatenate([welsp[0], addwell]))
    samewell = welsp[1].copy()
    samewell['flux'] *= 10
    welsp[1] = np.rec.array(np.concatenate([welsp[1], samewell]))
    m.wel.stress_period_data = welsp

    org_model_ws = "temp_pst_from"
    if os.path.exists(org_model_ws):
        shutil.rmtree(org_model_ws)
    m.external_path = "."
    m.change_model_ws(org_model_ws)
    m.write_input()

    # for exe in [mf_exe_path, mt_exe_path, ies_exe_path]:
    #     shutil.copy(os.path.relpath(exe, '..'), org_model_ws)

    print("{0} {1}".format(mf_exe_path, m.name + ".nam"), org_model_ws)
    os_utils.run("{0} {1}".format(mf_exe_path, m.name + ".nam"),
                 cwd=org_model_ws)
    hds_kperk = []
    for k in range(m.nlay):
        for kper in range(m.nper):
            hds_kperk.append([kper, k])
    hds_runline, df = pyemu.gw_utils.setup_hds_obs(
        os.path.join(m.model_ws, f"{m.name}.hds"), kperk_pairs=None, skip=None,
        prefix="hds", include_path=False)

    template_ws = "new_temp"
    # sr0 = m.sr
    sr = pyemu.helpers.SpatialReference.from_namfile(
        os.path.join(m.model_ws, m.namefile),
        delr=m.dis.delr, delc=m.dis.delc)
    # set up PstFrom object
    pf = PstFrom(original_d=org_model_ws, new_d=template_ws,
                 remove_existing=True,
                 longnames=True, spatial_reference=sr,
                 zero_based=False)
    pf.extra_py_imports.append('flopy')
    pf.mod_sys_cmds.append("which python")
    # obs
    #   using tabular style model output
    #   (generated by pyemu.gw_utils.setup_hds_obs())
    pf.add_observations('freyberg.hds.dat', insfile='freyberg.hds.dat.ins2',
                        index_cols='obsnme', use_cols='obsval', prefix='hds')
    pf.post_py_cmds.append(hds_runline)
    pf.tmp_files.append(f"{m.name}.hds")

    # pars
    v = pyemu.geostats.ExpVario(contribution=1.0, a=2500)
    geostruct = pyemu.geostats.GeoStruct(variograms=v, transform='log')
    # Pars for river list style model file, every entry in columns 3 and 4
    # specifying formatted model file and passing a geostruct  # TODO method for appending specific ult bounds
    # pf.add_parameters(filenames="RIV_0000.dat", par_type="grid",
    #                   index_cols=[0, 1, 2], use_cols=[3, 4],
    #                   par_name_base=["rivstage_grid", "rivcond_grid"],
    #                   mfile_fmt='%10d%10d%10d %15.8F %15.8F %15.8F',
    #                   geostruct=geostruct, lower_bound=[0.9, 0.01],
    #                   upper_bound=[1.1, 100.], ult_lbound=[0.3, None])
    # # 2 constant pars applied to columns 3 and 4
    # # this time specifying free formatted model file
    # pf.add_parameters(filenames="RIV_0000.dat", par_type="constant",
    #                   index_cols=[0, 1, 2], use_cols=[3, 4],
    #                   par_name_base=["rivstage", "rivcond"],
    #                   mfile_fmt='free', lower_bound=[0.9, 0.01],
    #                   upper_bound=[1.1, 100.], ult_lbound=[None, 0.01])
    # Pars for river list style model file, every entry in column 4
    pf.add_parameters(filenames="RIV_0000.dat", par_type="grid",
                      index_cols=[0, 1, 2], use_cols=[4],
                      par_name_base=["rivcond_grid"],
                      mfile_fmt='%10d%10d%10d %15.8F %15.8F %15.8F',
                      geostruct=geostruct, lower_bound=[0.01],
                      upper_bound=[100.], ult_lbound=[None])
    # constant par applied to column 4
    # this time specifying free formatted model file
    pf.add_parameters(filenames="RIV_0000.dat", par_type="constant",
                      index_cols=[0, 1, 2], use_cols=[4],
                      par_name_base=["rivcond"],
                      mfile_fmt='free', lower_bound=[0.01],
                      upper_bound=[100.], ult_lbound=[0.01])
    # pf.add_parameters(filenames="RIV_0000.dat", par_type="constant",
    #                   index_cols=[0, 1, 2], use_cols=5,
    #                   par_name_base="rivbot",
    #                   mfile_fmt='free', lower_bound=0.9,
    #                   upper_bound=1.1, ult_ubound=100.,
    #                   ult_lbound=0.001)
    # setting up temporal variogram for correlating temporal pars
    date = m.dis.start_datetime
    v = pyemu.geostats.ExpVario(contribution=1.0, a=180.0)  # 180 correlation length
    t_geostruct = pyemu.geostats.GeoStruct(variograms=v, transform='log')
    # looping over temporal list style input files
    # setting up constant parameters for col 3 for each temporal file
    # making sure all are set up with same pargp and geostruct (to ensure correlation)
    # Parameters for wel list style
    well_mfiles = ["WEL_0000.dat", "WEL_0001.dat", "WEL_0002.dat"]
    for t, well_file in enumerate(well_mfiles):
        # passing same temporal geostruct and pargp,
        # date is incremented and will be used for correlation with
        pf.add_parameters(filenames=well_file, par_type="constant",
                          index_cols=[0, 1, 2], use_cols=3,
                          par_name_base="flux", alt_inst_str='kper',
                          datetime=date, geostruct=t_geostruct,
                          pargp='wellflux_t', lower_bound=0.25,
                          upper_bound=1.75)
        date = (pd.to_datetime(date) +
                pd.DateOffset(m.dis.perlen.array[t], 'day'))
    # par for each well (same par through time)
    pf.add_parameters(filenames=well_mfiles,
                      par_type="grid", index_cols=[0, 1, 2], use_cols=3,
                      par_name_base="welflux_grid",
                      zone_array=m.bas6.ibound.array,
                      geostruct=geostruct, lower_bound=0.25, upper_bound=1.75)
    # global constant across all files
    pf.add_parameters(filenames=well_mfiles,
                      par_type="constant",
                      index_cols=[0, 1, 2], use_cols=3,
                      par_name_base=["flux_global"],
                      lower_bound=0.25, upper_bound=1.75)

    # Spatial array style pars - cell-by-cell
    hk_files = ["hk_Layer_{0:d}.ref".format(i) for i in range(1, 4)]
    for hk in hk_files:
        pf.add_parameters(filenames=hk, par_type="grid",
                          zone_array=m.bas6.ibound[0].array,
                          par_name_base="hk", alt_inst_str='lay',
                          geostruct=geostruct,
                          lower_bound=0.01, upper_bound=100.)

    # Pars for temporal array style model files
    date = m.dis.start_datetime  # reset date
    rch_mfiles = ["rech_0.ref", "rech_1.ref", "rech_2.ref"]
    for t, rch_file in enumerate(rch_mfiles):
        # constant par for each file but linked by geostruct and pargp
        pf.add_parameters(filenames=rch_file, par_type="constant",
                          zone_array=m.bas6.ibound[0].array,
                          par_name_base="rch", alt_inst_str='kper',
                          datetime=date, geostruct=t_geostruct,
                          pargp='rch_t', lower_bound=0.9, upper_bound=1.1)
        date = (pd.to_datetime(date) +
                pd.DateOffset(m.dis.perlen.array[t], 'day'))
    # spatially distributed array style pars - cell-by-cell
    # pf.add_parameters(filenames=rch_mfiles, par_type="grid",
    #                   zone_array=m.bas6.ibound[0].array,
    #                   par_name_base="rch",
    #                   geostruct=geostruct)
    pf.add_parameters(filenames=rch_mfiles, par_type="pilot_point",
                      zone_array=m.bas6.ibound[0].array,
                      par_name_base="rch", pp_space=1,
                      ult_ubound=None, ult_lbound=None,
                      geostruct=geostruct, lower_bound=0.9, upper_bound=1.1)
    # global constant recharge par
    pf.add_parameters(filenames=rch_mfiles, par_type="constant",
                      zone_array=m.bas6.ibound[0].array,
                      par_name_base="rch_global", lower_bound=0.9,
                      upper_bound=1.1)
    # zonal recharge pars
    pf.add_parameters(filenames=rch_mfiles,
                      par_type="zone", par_name_base='rch_zone',
                      lower_bound=0.9, upper_bound=1.1, ult_lbound=1.e-6,
                      ult_ubound=100.)


    # add model run command
    pf.mod_sys_cmds.append("{0} {1}".format(mf_exe_name, m.name + ".nam"))
    print(pf.mult_files)
    print(pf.org_files)


    # build pest
    pst = pf.build_pst('freyberg.pst')
    cov = pf.build_prior(fmt="ascii")
    pe = pf.draw(100, use_specsim=True)
    # check mult files are in pst input files
    csv = os.path.join(template_ws, "mult2model_info.csv")
    df = pd.read_csv(csv, index_col=0)
    mults_not_linked_to_pst = ((set(df.mlt_file.unique()) -
                                set(pst.input_files)) -
                               set(df.loc[df.pp_file.notna()].mlt_file))
    assert len(mults_not_linked_to_pst) == 0, print(mults_not_linked_to_pst)

    pst.write_input_files(pst_path=pf.new_d)
    # test par mults are working
    b_d = os.getcwd()
    os.chdir(pf.new_d)
    try:
        pyemu.helpers.apply_list_and_array_pars(
            arr_par_file="mult2model_info.csv")
    except Exception as e:
        os.chdir(b_d)
        raise Exception(str(e))
    os.chdir(b_d)

    pst.control_data.noptmax = 0
    pst.write(os.path.join(pf.new_d, "freyberg.pst"))
    pyemu.os_utils.run("{0} freyberg.pst".format(ies_exe_path), cwd=pf.new_d)

    res_file = os.path.join(pf.new_d, "freyberg.base.rei")
    assert os.path.exists(res_file), res_file
    pst.set_res(res_file)
    print(pst.phi)
    assert pst.phi < 1.0e-5, pst.phi

    pe.to_binary(os.path.join(pf.new_d, 'par.jcb'))

    # quick sweep test?
    pst.pestpp_options["ies_par_en"] = 'par.jcb'
    pst.pestpp_options["ies_num_reals"] = 10
    pst.control_data.noptmax = -1
    # par = pst.parameter_data
    # par.loc[:, 'parval1'] = pe.iloc[0].T
    pst.write(os.path.join(pf.new_d, "freyberg.pst"))
    pyemu.os_utils.run("{0} freyberg.pst".format(ies_exe_path), cwd=pf.new_d)
    # pyemu.os_utils.start_workers(pf.new_d,
    #                              exe_rel_path="pestpp-ies",
    #                              pst_rel_path="freyberg.pst",
    #                              num_workers=20, master_dir="master",
    #                              cleanup=False, port=4005)


def generic_function():
    import pandas as pd
    import numpy as np
    #onames = ["generic_obs_{0}".format(i) for i in range(100)]
    onames = pd.date_range("1-1-2020",periods=100,freq='d')
    df = pd.DataFrame({"index_2":np.arange(100),"simval1":1,"simval2":2,"datetime":onames})
    df.index = df.pop("datetime")
    df.to_csv("generic.csv",date_format="%d-%m-%Y %H:%M:%S")
    return df


def another_generic_function(some_arg):
    import pandas as pd
    import numpy as np
    print(some_arg)


def mf6_freyberg_test():
    import numpy as np
    import pandas as pd
    pd.set_option('display.max_rows', 500)
    pd.set_option('display.max_columns', 500)
    pd.set_option('display.width', 1000)
    try:
        import flopy
    except:
        return

    org_model_ws = os.path.join('..', 'examples', 'freyberg_mf6')
    tmp_model_ws = "temp_pst_from"
    if os.path.exists(tmp_model_ws):
        shutil.rmtree(tmp_model_ws)
    os.mkdir(tmp_model_ws)
    sim = flopy.mf6.MFSimulation.load(sim_ws=org_model_ws)
    # sim.set_all_data_external()
    sim.simulation_data.mfpath.set_sim_path(tmp_model_ws)
    # sim.set_all_data_external()
    m = sim.get_model("freyberg6")
    sim.set_all_data_external(check_data=False)
    sim.write_simulation()

    # to by pass the issues with flopy
    # shutil.copytree(org_model_ws,tmp_model_ws)
    # sim = flopy.mf6.MFSimulation.load(sim_ws=org_model_ws)
    # m = sim.get_model("freyberg6")

    # SETUP pest stuff...
    os_utils.run("{0} ".format(mf6_exe_path), cwd=tmp_model_ws)
    # doctor some of the list par files to add a comment string
    with open(
            os.path.join('temp_pst_from',
                         "freyberg6.wel_stress_period_data_1.txt"), 'r') as fr:
        lines = [line for line in fr]
    with open(os.path.join('temp_pst_from',
                         "freyberg6.wel_stress_period_data_1.txt"), 'w') as fw:
        fw.write("# comment line explaining this external file\n")
        for line in lines:
            fw.write(line)

    with open(
            os.path.join('temp_pst_from',
                         "freyberg6.wel_stress_period_data_2.txt"), 'r') as fr:
        lines = [line for line in fr]
    with open(os.path.join('temp_pst_from',
                         "freyberg6.wel_stress_period_data_2.txt"), 'w') as fw:
        fw.write("# comment line explaining this external file\n")
        for line in lines[0:3] + ["# comment mid table \n"] + lines[3:]:
            fw.write(line)

    with open(
            os.path.join('temp_pst_from',
                         "freyberg6.wel_stress_period_data_3.txt"), 'r') as fr:
        lines = [line for line in fr]
    with open(os.path.join('temp_pst_from',
                           "freyberg6.wel_stress_period_data_3.txt"), 'w') as fw:
        fw.write("#k i j flux \n")
        for line in lines:
            fw.write(line)

    with open(
            os.path.join('temp_pst_from',
                         "freyberg6.wel_stress_period_data_4.txt"), 'r') as fr:
        lines = [line for line in fr]
    with open(os.path.join('temp_pst_from',
                           "freyberg6.wel_stress_period_data_4.txt"), 'w') as fw:
        fw.write("# comment line explaining this external file\n"
                 "#k i j flux\n")
        for line in lines:
            fw.write(line)

    # generate a test with headers and non spatial idex
    sfr_pkgdf = pd.DataFrame.from_records(m.sfr.packagedata.array)
    l = sfr_pkgdf.columns.to_list()
    l = ['#rno', 'k', 'i', 'j'] + l[2:]
    with open(
            os.path.join('temp_pst_from',
                         "freyberg6.sfr_packagedata.txt"), 'r') as fr:
        lines = [line for line in fr]
    with open(os.path.join('temp_pst_from',
                           "freyberg6.sfr_packagedata_test.txt"), 'w') as fw:
        fw.write(' '.join(l))
        fw.write('\n')
        for line in lines:
            fw.write(line)

    template_ws = "new_temp"
    # sr0 = m.sr
    # sr = pyemu.helpers.SpatialReference.from_namfile(
    #     os.path.join(tmp_model_ws, "freyberg6.nam"),
    #     delr=m.dis.delr.array, delc=m.dis.delc.array)
    sr = m.modelgrid
    # set up PstFrom object
    pf = PstFrom(original_d=tmp_model_ws, new_d=template_ws,
                 remove_existing=True,
                 longnames=True, spatial_reference=sr,
                 zero_based=False,start_datetime="1-1-2018")
    # obs
    #   using tabular style model output
    #   (generated by pyemu.gw_utils.setup_hds_obs())
    # pf.add_observations('freyberg.hds.dat', insfile='freyberg.hds.dat.ins2',
    #                     index_cols='obsnme', use_cols='obsval', prefix='hds')

    # call generic once so that the output file exists
    os.chdir(template_ws)
    df = generic_function()
    os.chdir("..")
    # add the values in generic to the ctl file
    pf.add_observations("generic.csv",insfile="generic.csv.ins",index_cols=["datetime","index_2"],use_cols=["simval1","simval2"])
    # add the function call to make generic to the forward run script
    pf.add_py_function("pst_from_tests.py","generic_function()",is_pre_cmd=False)

    # add a function that isnt going to be called directly
    pf.add_py_function("pst_from_tests.py","another_generic_function(some_arg)",is_pre_cmd=None)

    #pf.post_py_cmds.append("generic_function()")
    df = pd.read_csv(os.path.join(tmp_model_ws, "sfr.csv"), index_col=0)
    pf.add_observations("sfr.csv", insfile="sfr.csv.ins", index_cols="time", use_cols=list(df.columns.values))
    v = pyemu.geostats.ExpVario(contribution=1.0,a=1000)
    gr_gs = pyemu.geostats.GeoStruct(variograms=v)
    rch_temporal_gs = pyemu.geostats.GeoStruct(variograms=pyemu.geostats.ExpVario(contribution=1.0,a=60))
    pf.extra_py_imports.append('flopy')
    ib = m.dis.idomain[0].array
    tags = {"npf_k_":[0.1,10.],"npf_k33_":[.1,10],"sto_ss":[.1,10],"sto_sy":[.9,1.1],"rch_recharge":[.5,1.5]}
    dts = pd.to_datetime("1-1-2018") + pd.to_timedelta(np.cumsum(sim.tdis.perioddata.array["perlen"]),unit="d")
    print(dts)
    for tag,bnd in tags.items():
        lb,ub = bnd[0],bnd[1]
        arr_files = [f for f in os.listdir(tmp_model_ws) if tag in f and f.endswith(".txt")]
        if "rch" in tag:
            pf.add_parameters(filenames=arr_files, par_type="grid", par_name_base="rch_gr",
                              pargp="rch_gr", zone_array=ib, upper_bound=ub, lower_bound=lb,
                              geostruct=gr_gs)
            for arr_file in arr_files:
                kper = int(arr_file.split('.')[1].split('_')[-1]) - 1
                pf.add_parameters(filenames=arr_file,par_type="constant",par_name_base=arr_file.split('.')[1]+"_cn",
                                  pargp="rch_const",zone_array=ib,upper_bound=ub,lower_bound=lb,geostruct=rch_temporal_gs,
                                  datetime=dts[kper])
        else:
            for arr_file in arr_files:

                # these ult bounds are used later in an assert
                # and also are used so that the initial input array files
                # are preserved
                ult_lb = None
                ult_ub = None
                if "npf_k_" in arr_file:
                   ult_ub = 31.0
                   ult_lb = -1.3
                pf.add_parameters(filenames=arr_file,par_type="grid",par_name_base=arr_file.split('.')[1]+"_gr",
                                  pargp=arr_file.split('.')[1]+"_gr",zone_array=ib,upper_bound=ub,lower_bound=lb,
                                  geostruct=gr_gs,ult_ubound=None if ult_ub is None else ult_ub + 1,
                                  ult_lbound=None if ult_lb is None else ult_lb + 1)
                # use a slightly lower ult bound here
                pf.add_parameters(filenames=arr_file, par_type="pilotpoints", par_name_base=arr_file.split('.')[1]+"_pp",
                                  pargp=arr_file.split('.')[1]+"_pp", zone_array=ib,upper_bound=ub,lower_bound=lb,
                                  ult_ubound=None if ult_ub is None else ult_ub - 1,
                                  ult_lbound=None if ult_lb is None else ult_lb - 1)


    # add SP1 spatially constant, but temporally correlated wel flux pars
    kper = 0
    list_file = "freyberg6.wel_stress_period_data_{0}.txt".format(kper+1)
    pf.add_parameters(filenames=list_file, par_type="constant",
                      par_name_base="twel_mlt_{0}".format(kper),
                      pargp="twel_mlt".format(kper), index_cols=[0, 1, 2],
                      use_cols=[3], upper_bound=1.5, lower_bound=0.5,
                      datetime=dts[kper], geostruct=rch_temporal_gs,
                      mfile_skip=1)

    # add temporally indep, but spatially correlated wel flux pars
    pf.add_parameters(filenames=list_file, par_type="grid",
                      par_name_base="wel_grid_{0}".format(kper),
                      pargp="wel_{0}".format(kper), index_cols=[0, 1, 2],
                      use_cols=[3], upper_bound=1.5, lower_bound=0.5,
                      geostruct=gr_gs, mfile_skip=1)
    kper = 1
    list_file = "freyberg6.wel_stress_period_data_{0}.txt".format(kper+1)
    pf.add_parameters(filenames=list_file, par_type="constant",
                      par_name_base="twel_mlt_{0}".format(kper),
                      pargp="twel_mlt".format(kper), index_cols=[0, 1, 2],
                      use_cols=[3], upper_bound=1.5, lower_bound=0.5,
                      datetime=dts[kper], geostruct=rch_temporal_gs,
                      mfile_skip='#')
    # add temporally indep, but spatially correlated wel flux pars
    pf.add_parameters(filenames=list_file, par_type="grid",
                      par_name_base="wel_grid_{0}".format(kper),
                      pargp="wel_{0}".format(kper), index_cols=[0, 1, 2],
                      use_cols=[3], upper_bound=1.5, lower_bound=0.5,
                      geostruct=gr_gs, mfile_skip='#')
    kper = 2
    list_file = "freyberg6.wel_stress_period_data_{0}.txt".format(kper+1)
    pf.add_parameters(filenames=list_file, par_type="constant",
                      par_name_base="twel_mlt_{0}".format(kper),
                      pargp="twel_mlt".format(kper), index_cols=['#k', 'i', 'j'],
                      use_cols=['flux'], upper_bound=1.5, lower_bound=0.5,
                      datetime=dts[kper], geostruct=rch_temporal_gs)
    # add temporally indep, but spatially correlated wel flux pars
    pf.add_parameters(filenames=list_file, par_type="grid",
                      par_name_base="wel_grid_{0}".format(kper),
                      pargp="wel_{0}".format(kper), index_cols=['#k', 'i', 'j'],
                      use_cols=['flux'], upper_bound=1.5, lower_bound=0.5,
                      geostruct=gr_gs)
    kper = 3
    list_file = "freyberg6.wel_stress_period_data_{0}.txt".format(kper+1)
    pf.add_parameters(filenames=list_file, par_type="constant",
                      par_name_base="twel_mlt_{0}".format(kper),
                      pargp="twel_mlt".format(kper), index_cols=['#k', 'i', 'j'],
                      use_cols=['flux'], upper_bound=1.5, lower_bound=0.5,
                      datetime=dts[kper], geostruct=rch_temporal_gs,
                      mfile_skip=1)
    # add temporally indep, but spatially correlated wel flux pars
    pf.add_parameters(filenames=list_file, par_type="grid",
                      par_name_base="wel_grid_{0}".format(kper),
                      pargp="wel_{0}".format(kper), index_cols=['#k', 'i', 'j'],
                      use_cols=['flux'], upper_bound=1.5, lower_bound=0.5,
                      geostruct=gr_gs, mfile_skip=1)
    list_files = ["freyberg6.wel_stress_period_data_{0}.txt".format(t)
                  for t in range(5, m.nper+1)]
    for list_file in list_files:
        kper = int(list_file.split(".")[1].split('_')[-1]) - 1
        # add spatially constant, but temporally correlated wel flux pars
        pf.add_parameters(filenames=list_file,par_type="constant",par_name_base="twel_mlt_{0}".format(kper),
                          pargp="twel_mlt".format(kper),index_cols=[0,1,2],use_cols=[3],
                          upper_bound=1.5,lower_bound=0.5, datetime=dts[kper], geostruct=rch_temporal_gs)

        # add temporally indep, but spatially correlated wel flux pars
        pf.add_parameters(filenames=list_file, par_type="grid", par_name_base="wel_grid_{0}".format(kper),
                          pargp="wel_{0}".format(kper), index_cols=[0, 1, 2], use_cols=[3],
                          upper_bound=1.5, lower_bound=0.5, geostruct=gr_gs)

    # test non spatial idx in list like
    pf.add_parameters(filenames="freyberg6.sfr_packagedata_test.txt", par_name_base="sfr_rhk",
                      pargp="sfr_rhk", index_cols=['#rno'], use_cols=['rhk'], upper_bound=10.,
                      lower_bound=0.1,
                      par_type="grid")

    # add model run command
    pf.mod_sys_cmds.append("mf6")
    print(pf.mult_files)
    print(pf.org_files)

    # build pest
    pst = pf.build_pst('freyberg.pst')

    # quick check of write and apply method
    pars = pst.parameter_data
    # set reach 1 hk to 100
    sfr_pars = pars.loc[pars.parnme.str.startswith('sfr')].index
    pars.loc[sfr_pars, 'parval1'] = np.random.random(len(sfr_pars)) * 10

    sfr_pars = pars.loc[sfr_pars].copy()
    sfr_pars[['inst', 'usecol', '#rno']] = sfr_pars.parnme.apply(
        lambda x: pd.DataFrame([s.split(':') for s in x.split('_')
                                if ':' in s]).set_index(0)[1])

    sfr_pars['#rno'] = sfr_pars['#rno'] .astype(int)
    os.chdir(pf.new_d)
    pst.write_input_files()
    try:
        pyemu.helpers.apply_list_and_array_pars()
    except Exception as e:
        os.chdir('..')
        raise e
    os.chdir('..')
    # verify apply
    df = pd.read_csv(os.path.join(
        pf.new_d, "freyberg6.sfr_packagedata_test.txt"),
        delim_whitespace=True, index_col=0)
    df.index = df.index - 1
    print(df.rhk)
    print((sfr_pkgdf.set_index('rno').loc[df.index, 'rhk'] *
                 sfr_pars.set_index('#rno').loc[df.index, 'parval1']))
    assert np.isclose(
        df.rhk, (sfr_pkgdf.set_index('rno').loc[df.index, 'rhk'] *
                 sfr_pars.set_index('#rno').loc[df.index, 'parval1'])).all()
    pars.loc[sfr_pars.index, 'parval1'] = 1.0

    # add more:
    pf.add_parameters(filenames="freyberg6.sfr_packagedata.txt", par_name_base="sfr_rhk",
                      pargp="sfr_rhk", index_cols={'k': 1, 'i': 2, 'j': 3}, use_cols=[9], upper_bound=10.,
                      lower_bound=0.1,
                      par_type="grid", rebuild_pst=True)

    df = pd.read_csv(os.path.join(tmp_model_ws, "heads.csv"), index_col=0)
    pf.add_observations("heads.csv", insfile="heads.csv.ins", index_cols="time", use_cols=list(df.columns.values),
                        prefix="hds", rebuild_pst=True)

    # test par mults are working
    b_d = os.getcwd()
    os.chdir(pf.new_d)
    try:
        pyemu.helpers.apply_list_and_array_pars(
            arr_par_file="mult2model_info.csv",chunk_len=1)
    except Exception as e:
        os.chdir(b_d)
        raise Exception(str(e))
    os.chdir(b_d)

    cov = pf.build_prior(fmt="none").to_dataframe()
    twel_pars = [p for p in pst.par_names if "twel_mlt" in p]
    twcov = cov.loc[twel_pars,twel_pars]
    dsum = np.diag(twcov.values).sum()
    assert twcov.sum().sum() > dsum

    rch_cn = [p for p in pst.par_names if "_cn" in p]
    print(rch_cn)
    rcov = cov.loc[rch_cn,rch_cn]
    dsum = np.diag(rcov.values).sum()
    assert rcov.sum().sum() > dsum

    num_reals = 100
    pe = pf.draw(num_reals, use_specsim=True)
    pe.to_binary(os.path.join(template_ws, "prior.jcb"))
    assert pe.shape[1] == pst.npar_adj, "{0} vs {1}".format(pe.shape[0], pst.npar_adj)
    assert pe.shape[0] == num_reals


    pst.control_data.noptmax = 0
    pst.pestpp_options["additional_ins_delimiters"] = ","

    pst.write(os.path.join(pf.new_d, "freyberg.pst"))
    pyemu.os_utils.run("{0} freyberg.pst".format(ies_exe_path), cwd=pf.new_d)

    res_file = os.path.join(pf.new_d, "freyberg.base.rei")
    assert os.path.exists(res_file), res_file
    pst.set_res(res_file)
    print(pst.phi)
    #assert pst.phi < 1.0e-5, pst.phi

    # check mult files are in pst input files
    csv = os.path.join(template_ws, "mult2model_info.csv")
    df = pd.read_csv(csv, index_col=0)
    mults_not_linked_to_pst = ((set(df.mlt_file.unique()) -
                                set(pst.input_files)) -
                               set(df.loc[df.pp_file.notna()].mlt_file))
    assert len(mults_not_linked_to_pst) == 0, print(mults_not_linked_to_pst)

    # make sure the appropriate ult bounds have made it thru
    df = pd.read_csv(os.path.join(template_ws,"mult2model_info.csv"))
    print(df.columns)
    df = df.loc[df.model_file.apply(lambda x: "npf_k_" in x),:]
    print(df)
    print(df.upper_bound)
    print(df.lower_bound)
    assert np.abs(float(df.upper_bound.min()) - 30.) < 1.0e-6,df.upper_bound.min()
    assert np.abs(float(df.lower_bound.max()) - -0.3) < 1.0e-6,df.lower_bound.max()

def mf6_freyberg_shortnames_test():
    import numpy as np
    import pandas as pd
    pd.set_option('display.max_rows', 500)
    pd.set_option('display.max_columns', 500)
    pd.set_option('display.width', 1000)
    try:
        import flopy
    except:
        return

    org_model_ws = os.path.join('..', 'examples', 'freyberg_mf6')
    tmp_model_ws = "temp_pst_from"
    if os.path.exists(tmp_model_ws):
        shutil.rmtree(tmp_model_ws)
    # os.mkdir(tmp_model_ws)
    # sim = flopy.mf6.MFSimulation.load(sim_ws=org_model_ws)
    # # sim.set_all_data_external()
    # sim.simulation_data.mfpath.set_sim_path(tmp_model_ws)
    # # sim.set_all_data_external()
    # m = sim.get_model("freyberg6")
    # sim.set_all_data_external()
    # sim.write_simulation()

    # to by pass the issues with flopy
    shutil.copytree(org_model_ws,tmp_model_ws)
    sim = flopy.mf6.MFSimulation.load(sim_ws=org_model_ws)
    m = sim.get_model("freyberg6")

    # SETUP pest stuff...
    os_utils.run("{0} ".format("mf6"), cwd=tmp_model_ws)

    template_ws = "new_temp"
    # sr0 = m.sr
    sr = pyemu.helpers.SpatialReference.from_namfile(
        os.path.join(tmp_model_ws, "freyberg6.nam"),
        delr=m.dis.delr.array, delc=m.dis.delc.array)
    # set up PstFrom object
    pf = PstFrom(original_d=tmp_model_ws, new_d=template_ws,
                 remove_existing=True,
                 longnames=False, spatial_reference=sr,
                 zero_based=False,start_datetime="1-1-2018")
    # obs
    #   using tabular style model output
    #   (generated by pyemu.gw_utils.setup_hds_obs())
    # pf.add_observations('freyberg.hds.dat', insfile='freyberg.hds.dat.ins2',
    #                     index_cols='obsnme', use_cols='obsval', prefix='hds')

    df = pd.read_csv(os.path.join(tmp_model_ws,"heads.csv"),index_col=0)
    pf.add_observations("heads.csv",insfile="heads.csv.ins",index_cols="time",use_cols=list(df.columns.values),prefix="hds")
    df = pd.read_csv(os.path.join(tmp_model_ws, "sfr.csv"), index_col=0)
    pf.add_observations("sfr.csv", insfile="sfr.csv.ins", index_cols="time", use_cols=list(df.columns.values))
    v = pyemu.geostats.ExpVario(contribution=1.0,a=1000)
    gr_gs = pyemu.geostats.GeoStruct(variograms=v)
    rch_temporal_gs = pyemu.geostats.GeoStruct(variograms=pyemu.geostats.ExpVario(contribution=1.0,a=60))
    pf.extra_py_imports.append('flopy')
    ib = m.dis.idomain[0].array
    tags = {"npf_k_":[0.1,10.],"npf_k33_":[.1,10],"sto_ss":[.1,10],"sto_sy":[.9,1.1],"rch_recharge":[.5,1.5]}
    dts = pd.to_datetime("1-1-2018") + pd.to_timedelta(np.cumsum(sim.tdis.perioddata.array["perlen"]),unit="d")
    print(dts)
    for tag,bnd in tags.items():
        lb,ub = bnd[0],bnd[1]
        arr_files = [f for f in os.listdir(tmp_model_ws) if tag in f and f.endswith(".txt")]
        if "rch" in tag:
            pf.add_parameters(filenames=arr_files, par_type="grid", par_name_base="rg",
                              pargp="rg", zone_array=ib, upper_bound=ub, lower_bound=lb,
                              geostruct=gr_gs)
            for arr_file in arr_files:
                kper = int(arr_file.split('.')[1].split('_')[-1]) - 1
                pf.add_parameters(filenames=arr_file,par_type="constant",par_name_base="rc{0}_".format(kper),
                                  pargp="rc",zone_array=ib,upper_bound=ub,lower_bound=lb,geostruct=rch_temporal_gs,
                                  datetime=dts[kper])
        else:

            for arr_file in arr_files:
                pb = tag.split('_')[1] + arr_file.split('.')[1][-1]
                pf.add_parameters(filenames=arr_file,par_type="grid",par_name_base=pb+"g",
                                  pargp=pb+"g",zone_array=ib,upper_bound=ub,lower_bound=lb,
                                  geostruct=gr_gs)
                pf.add_parameters(filenames=arr_file, par_type="pilotpoints", par_name_base=pb+"p",
                                  pargp=pb+"p", zone_array=ib,upper_bound=ub,lower_bound=lb,)


    list_files = [f for f in os.listdir(tmp_model_ws) if "wel_stress_period_data" in f]
    for list_file in list_files:
        kper = list_file.split(".")[1].split('_')[-1]
        pf.add_parameters(filenames=list_file,par_type="constant",par_name_base="w{0}".format(kper),
                          pargp="wel_{0}".format(kper),index_cols=[0,1,2],use_cols=[3],
                          upper_bound=1.5,lower_bound=0.5)

    pf.add_parameters(filenames="freyberg6.sfr_packagedata.txt", par_name_base="rhk",
                      pargp="sfr_rhk", index_cols=[0, 1, 2, 3], use_cols=[9], upper_bound=10., lower_bound=0.1,
                      par_type="grid")

    # add model run command
    pf.mod_sys_cmds.append("mf6")
    print(pf.mult_files)
    print(pf.org_files)

    # build pest
    pst = pf.build_pst('freyberg.pst')

    num_reals = 100
    pe = pf.draw(num_reals, use_specsim=True)
    pe.to_binary(os.path.join(template_ws, "prior.jcb"))
    assert pe.shape[1] == pst.npar_adj, "{0} vs {1}".format(pe.shape[0], pst.npar_adj)
    assert pe.shape[0] == num_reals

    # test par mults are working
    b_d = os.getcwd()
    os.chdir(pf.new_d)
    try:
        pyemu.helpers.apply_list_and_array_pars(
            arr_par_file="mult2model_info.csv")
    except Exception as e:
        os.chdir(b_d)
        raise Exception(str(e))
    os.chdir(b_d)

    pst.control_data.noptmax = 0
    pst.pestpp_options["additional_ins_delimiters"] = ","

    pst.write(os.path.join(pf.new_d, "freyberg.pst"))
    pyemu.os_utils.run("{0} freyberg.pst".format(ies_exe_path), cwd=pf.new_d)

    res_file = os.path.join(pf.new_d, "freyberg.base.rei")
    assert os.path.exists(res_file), res_file
    pst.set_res(res_file)
    print(pst.phi)
    #assert pst.phi < 1.0e-5, pst.phi



    # check mult files are in pst input files
    csv = os.path.join(template_ws, "mult2model_info.csv")
    df = pd.read_csv(csv, index_col=0)
    mults_not_linked_to_pst = ((set(df.mlt_file.unique()) -
                                set(pst.input_files)) -
                               set(df.loc[df.pp_file.notna()].mlt_file))
    assert len(mults_not_linked_to_pst) == 0, print(mults_not_linked_to_pst)


def mf6_freyberg_da_test():
    import numpy as np
    import pandas as pd
    pd.set_option('display.max_rows', 500)
    pd.set_option('display.max_columns', 500)
    pd.set_option('display.width', 1000)
    try:
        import flopy
    except:
        return

    org_model_ws = os.path.join('..', 'examples', 'freyberg_mf6_da')
    tmp_model_ws = "temp_pst_from"
    if os.path.exists(tmp_model_ws):
        shutil.rmtree(tmp_model_ws)
    # to by pass the issues with flopy
    shutil.copytree(org_model_ws,tmp_model_ws)
    sim = flopy.mf6.MFSimulation.load(sim_ws=org_model_ws)
    m = sim.get_model("freyberg6")

    # SETUP pest stuff...
    os_utils.run("{0} ".format("mf6"), cwd=tmp_model_ws)

    template_ws = "new_temp_da"
    # sr0 = m.sr
    sr = pyemu.helpers.SpatialReference.from_namfile(
        os.path.join(tmp_model_ws, "freyberg6.nam"),
        delr=m.dis.delr.array, delc=m.dis.delc.array)
    # set up PstFrom object
    pf = PstFrom(original_d=tmp_model_ws, new_d=template_ws,
                 remove_existing=True,
                 longnames=True, spatial_reference=sr,
                 zero_based=False,start_datetime="1-1-2018")
    # obs
    #   using tabular style model output
    #   (generated by pyemu.gw_utils.setup_hds_obs())
    # pf.add_observations('freyberg.hds.dat', insfile='freyberg.hds.dat.ins2',
    #                     index_cols='obsnme', use_cols='obsval', prefix='hds')

    df = pd.read_csv(os.path.join(tmp_model_ws,"heads.csv"),index_col=0)
    pf.add_observations("heads.csv",insfile="heads.csv.ins",index_cols="time",use_cols=list(df.columns.values),prefix="hds")
    df = pd.read_csv(os.path.join(tmp_model_ws, "sfr.csv"), index_col=0)
    pf.add_observations("sfr.csv", insfile="sfr.csv.ins", index_cols="time", use_cols=list(df.columns.values))
    v = pyemu.geostats.ExpVario(contribution=1.0,a=1000)
    gr_gs = pyemu.geostats.GeoStruct(variograms=v)
    rch_temporal_gs = pyemu.geostats.GeoStruct(variograms=pyemu.geostats.ExpVario(contribution=1.0,a=60))
    pf.extra_py_imports.append('flopy')
    ib = m.dis.idomain[0].array
    tags = {"npf_k_":[0.1,10.],"npf_k33_":[.1,10],"sto_ss":[.1,10],"sto_sy":[.9,1.1],"rch_recharge":[.5,1.5]}
    dts = pd.to_datetime("1-1-2018") + pd.to_timedelta(np.cumsum(sim.tdis.perioddata.array["perlen"]),unit="d")
    print(dts)
    for tag,bnd in tags.items():
        lb,ub = bnd[0],bnd[1]
        arr_files = [f for f in os.listdir(tmp_model_ws) if tag in f and f.endswith(".txt")]
        if "rch" in tag:
            pf.add_parameters(filenames=arr_files, par_type="grid", par_name_base="rch_gr",
                              pargp="rch_gr", zone_array=ib, upper_bound=ub, lower_bound=lb,
                              geostruct=gr_gs)
            for arr_file in arr_files:
                kper = int(arr_file.split('.')[1].split('_')[-1]) - 1
                pf.add_parameters(filenames=arr_file,par_type="constant",par_name_base=arr_file.split('.')[1]+"_cn",
                                  pargp="rch_const",zone_array=ib,upper_bound=ub,lower_bound=lb,geostruct=rch_temporal_gs,
                                  datetime=dts[kper])
        else:
            for arr_file in arr_files:
                pf.add_parameters(filenames=arr_file,par_type="grid",par_name_base=arr_file.split('.')[1]+"_gr",
                                  pargp=arr_file.split('.')[1]+"_gr",zone_array=ib,upper_bound=ub,lower_bound=lb,
                                  geostruct=gr_gs)
                pf.add_parameters(filenames=arr_file, par_type="pilotpoints", par_name_base=arr_file.split('.')[1]+"_pp",
                                  pargp=arr_file.split('.')[1]+"_pp", zone_array=ib,upper_bound=ub,lower_bound=lb,)


    list_files = [f for f in os.listdir(tmp_model_ws) if "wel_stress_period_data" in f]
    for list_file in list_files:
        kper = int(list_file.split(".")[1].split('_')[-1]) - 1
        # add spatially constant, but temporally correlated wel flux pars
        pf.add_parameters(filenames=list_file,par_type="constant",par_name_base="twel_mlt_{0}".format(kper),
                          pargp="twel_mlt".format(kper),index_cols=[0,1,2],use_cols=[3],
                          upper_bound=1.5,lower_bound=0.5, datetime=dts[kper], geostruct=rch_temporal_gs)

        # add temporally indep, but spatially correlated wel flux pars
        pf.add_parameters(filenames=list_file, par_type="grid", par_name_base="wel_grid_{0}".format(kper),
                          pargp="wel_{0}".format(kper), index_cols=[0, 1, 2], use_cols=[3],
                          upper_bound=1.5, lower_bound=0.5, geostruct=gr_gs)

    pf.add_parameters(filenames="freyberg6.sfr_packagedata.txt",par_name_base="sfr_rhk",
                      pargp="sfr_rhk",index_cols={'k':1,'i':2,'j':3},use_cols=[9],upper_bound=10.,lower_bound=0.1,
                      par_type="grid")

    # add model run command
    pf.mod_sys_cmds.append("mf6")
    print(pf.mult_files)
    print(pf.org_files)

    # build pest
    pst = pf.build_pst('freyberg.pst')
    pst.write(os.path.join(template_ws,"freyberg6_da.pst"),version=2)


    # setup direct (non mult) pars on the IC files with par names that match the obs names
    obs = pst.observation_data
    hobs = obs.loc[obs.obsnme.str.startswith("hds"),:].copy()
    hobs.loc[:,"k"] = hobs.obsnme.apply(lambda x: int(x.split(':')[1].split("_")[1]))
    hobs.loc[:, "i"] = hobs.obsnme.apply(lambda x: int(x.split(':')[1].split("_")[2]))
    hobs.loc[:, "j"] = hobs.obsnme.apply(lambda x: int(x.split(':')[1].split("_")[3]))
    hobs_set = set(hobs.obsnme.to_list())
    ic_files = [f for f in os.listdir(template_ws) if "ic_strt" in f and f.endswith(".txt")]
    print(ic_files)
    ib = m.dis.idomain[0].array
    tpl_files = []
    for ic_file in ic_files:
        tpl_file = os.path.join(template_ws,ic_file+".tpl")
        vals,names = [],[]
        with open(tpl_file,'w') as f:
            f.write("ptf ~\n")
            k = int(ic_file.split('.')[1][-1]) - 1
            org_arr = np.loadtxt(os.path.join(template_ws,ic_file))
            for i in range(org_arr.shape[0]):
                for j in range(org_arr.shape[1]):
                    if ib[i,j] < 1:
                        f.write(" -1.0e+30 ")
                    else:
                        pname = "hds_usecol:trgw_{0}_{1}_{2}_time:31.0".format(k,i,j)
                        if pname not in hobs_set and ib[i,j] > 0:
                            print(k,i,j,pname,ib[i,j])
                        f.write(" ~  {0}   ~".format(pname))
                        vals.append(org_arr[i,j])
                        names.append(pname)
                f.write("\n")
        df = pf.pst.add_parameters(tpl_file,pst_path=".")
        pf.pst.parameter_data.loc[df.parnme,"partrans"] = "fixed"
        pf.pst.parameter_data.loc[names,"parval1"] = vals

    pf.pst.write(os.path.join(template_ws,"freyberg6_da.pst"),version=2)

    num_reals = 100
    pe = pf.draw(num_reals, use_specsim=True)
    pe.to_binary(os.path.join(template_ws, "prior.jcb"))
    assert pe.shape[1] == pst.npar_adj, "{0} vs {1}".format(pe.shape[0], pst.npar_adj)
    assert pe.shape[0] == num_reals

    # test par mults are working
    b_d = os.getcwd()
    os.chdir(pf.new_d)
    try:
        pyemu.helpers.apply_list_and_array_pars(
            arr_par_file="mult2model_info.csv")
    except Exception as e:
        os.chdir(b_d)
        raise Exception(str(e))
    os.chdir(b_d)

    pst.control_data.noptmax = 0
    pst.pestpp_options["additional_ins_delimiters"] = ","

    pst.write(os.path.join(pf.new_d, "freyberg.pst"))
    pyemu.os_utils.run("{0} freyberg.pst".format(ies_exe_path), cwd=pf.new_d)

    res_file = os.path.join(pf.new_d, "freyberg.base.rei")
    assert os.path.exists(res_file), res_file
    pst.set_res(res_file)
    print(pst.phi)
    #assert pst.phi < 1.0e-5, pst.phi



    # check mult files are in pst input files
    csv = os.path.join(template_ws, "mult2model_info.csv")
    df = pd.read_csv(csv, index_col=0)
    mults_not_linked_to_pst = ((set(df.mlt_file.unique()) -
                                set(pst.input_files)) -
                               set(df.loc[df.pp_file.notna()].mlt_file))
    assert len(mults_not_linked_to_pst) == 0, print(mults_not_linked_to_pst)


def mf6_freyberg_direct_test():

    import numpy as np
    import pandas as pd
    pd.set_option('display.max_rows', 500)
    pd.set_option('display.max_columns', 500)
    pd.set_option('display.width', 1000)
    try:
        import flopy
    except:
        return

    org_model_ws = os.path.join('..', 'examples', 'freyberg_mf6')
    tmp_model_ws = "temp_pst_from_direct"
    if os.path.exists(tmp_model_ws):
        shutil.rmtree(tmp_model_ws)
    os.mkdir(tmp_model_ws)
    sim = flopy.mf6.MFSimulation.load(sim_ws=org_model_ws)
    # sim.set_all_data_external()
    sim.simulation_data.mfpath.set_sim_path(tmp_model_ws)
    # sim.set_all_data_external()
    m = sim.get_model("freyberg6")
    sim.set_all_data_external()
    sim.write_simulation()

    # to by pass the issues with flopy
    # shutil.copytree(org_model_ws,tmp_model_ws)
    # sim = flopy.mf6.MFSimulation.load(sim_ws=org_model_ws)
    # m = sim.get_model("freyberg6")

    # SETUP pest stuff...
    os_utils.run("{0} ".format("mf6"), cwd=tmp_model_ws)

    template_ws = "new_temp_direct"
    sr = m.modelgrid
    # set up PstFrom object
    pf = PstFrom(original_d=tmp_model_ws, new_d=template_ws,
                 remove_existing=True,
                 longnames=True, spatial_reference=sr,
                 zero_based=False, start_datetime="1-1-2018")
    # obs
    #   using tabular style model output
    #   (generated by pyemu.gw_utils.setup_hds_obs())
    # pf.add_observations('freyberg.hds.dat', insfile='freyberg.hds.dat.ins2',
    #                     index_cols='obsnme', use_cols='obsval', prefix='hds')

    df = pd.read_csv(os.path.join(tmp_model_ws, "sfr.csv"), index_col=0)
    pf.add_observations("sfr.csv", insfile="sfr.csv.ins", index_cols="time",
                        use_cols=["GAGE_1","HEADWATER","TAILWATER"],ofile_sep=",")
    v = pyemu.geostats.ExpVario(contribution=1.0, a=1000)
    gr_gs = pyemu.geostats.GeoStruct(variograms=v,transform="log")
    rch_temporal_gs = pyemu.geostats.GeoStruct(variograms=pyemu.geostats.ExpVario(contribution=1.0, a=60))
    pf.extra_py_imports.append('flopy')
    ib = m.dis.idomain[0].array
    tags = {"npf_k_": [0.1, 10.], "npf_k33_": [.1, 10], "sto_ss": [.1, 10], "sto_sy": [.9, 1.1],
            "rch_recharge": [.5, 1.5]}
    dts = pd.to_datetime("1-1-2018") + pd.to_timedelta(np.cumsum(sim.tdis.perioddata.array["perlen"]), unit="d")
    print(dts)
    for tag, bnd in tags.items():
        lb, ub = bnd[0], bnd[1]
        arr_files = [f for f in os.listdir(tmp_model_ws) if tag in f and f.endswith(".txt")]
        if "rch" in tag:
            for arr_file in arr_files:
                recharge_files = ["recharge_1.txt","recharge_2.txt","recharge_3.txt"]
                pf.add_parameters(filenames=arr_file, par_type="grid", par_name_base="rch_gr",
                                  pargp="rch_gr", zone_array=ib, upper_bound=1.0e-3, lower_bound=1.0e-7,
                                  par_style="direct")

            for arr_file in arr_files:
                kper = int(arr_file.split('.')[1].split('_')[-1]) - 1
                pf.add_parameters(filenames=arr_file, par_type="constant",
                                  par_name_base=arr_file.split('.')[1] + "_cn",
                                  pargp="rch_const", zone_array=ib, upper_bound=ub, lower_bound=lb,
                                  geostruct=rch_temporal_gs,
                                  datetime=dts[kper])
        else:
            for arr_file in arr_files:
                pf.add_parameters(filenames=arr_file, par_type="grid", par_name_base=arr_file.split('.')[1] + "_gr",
                                  pargp=arr_file.split('.')[1] + "_gr", zone_array=ib, upper_bound=ub,
                                  lower_bound=lb,
                                  geostruct=gr_gs)


    list_files = ["freyberg6.wel_stress_period_data_{0}.txt".format(t)
                  for t in range(1, m.nper + 1)]
    list_files.sort()
    for list_file in list_files:
        kper = int(list_file.split(".")[1].split('_')[-1]) - 1
        #add spatially constant, but temporally correlated wel flux pars
        pf.add_parameters(filenames=list_file, par_type="constant", par_name_base="twel_mlt_{0}".format(kper),
                          pargp="twel_mlt_{0}".format(kper), index_cols=[0, 1, 2], use_cols=[3],
                          upper_bound=1.5, lower_bound=0.5, datetime=dts[kper], geostruct=rch_temporal_gs)

        # add temporally indep, but spatially correlated wel flux pars
        pf.add_parameters(filenames=list_file, par_type="grid", par_name_base="wel_grid_{0}".format(kper),
                          pargp="wel_{0}".format(kper), index_cols=[0, 1, 2], use_cols=[3],
                          upper_bound=0.0, lower_bound=-1000, geostruct=gr_gs,par_style="direct",
                          transform="none")

    list_file = "freyberg6.ghb_stress_period_data_1.txt"
    pf.add_parameters(filenames=list_file, par_type="grid", par_name_base=["ghb_stage","ghb_cond"],
                      pargp=["ghb_stage","ghb_cond"], index_cols=[0, 1, 2], use_cols=[3,4],
                      upper_bound=[35,150], lower_bound=[32,50], geostruct=gr_gs, par_style="direct",
                      transform="none")


    # add model run command
    pf.mod_sys_cmds.append("mf6")
    print(pf.mult_files)
    print(pf.org_files)

    # build pest
    pst = pf.build_pst('freyberg.pst')
    cov = pf.build_prior(fmt="non")
    cov.to_coo("prior.jcb")
    pst.try_parse_name_metadata()
    df = pd.read_csv(os.path.join(tmp_model_ws, "heads.csv"), index_col=0)
    pf.add_observations("heads.csv", insfile="heads.csv.ins", index_cols="time", use_cols=list(df.columns.values),
                        prefix="hds", rebuild_pst=True)

    # test par mults are working
    b_d = os.getcwd()
    os.chdir(pf.new_d)
    try:
        pyemu.helpers.apply_list_and_array_pars(
            arr_par_file="mult2model_info.csv", chunk_len=1)
    except Exception as e:
        os.chdir(b_d)
        raise Exception(str(e))
    os.chdir(b_d)

    num_reals = 100
    pe = pf.draw(num_reals, use_specsim=True)
    pe.to_binary(os.path.join(template_ws, "prior.jcb"))
    assert pe.shape[1] == pst.npar_adj, "{0} vs {1}".format(pe.shape[0], pst.npar_adj)
    assert pe.shape[0] == num_reals

    pst.control_data.noptmax = 0
    pst.pestpp_options["additional_ins_delimiters"] = ","

    pst.write(os.path.join(pf.new_d, "freyberg.pst"))
    pyemu.os_utils.run("{0} freyberg.pst".format(ies_exe_path), cwd=pf.new_d)

    res_file = os.path.join(pf.new_d, "freyberg.base.rei")
    assert os.path.exists(res_file), res_file
    pst.set_res(res_file)
    print(pst.phi)
    assert pst.phi < 0.1, pst.phi


    # turn direct recharge to min and direct wel to min and
    # check that the model results are consistent
    par = pst.parameter_data
    rch_par = par.loc[par.parnme.apply(
        lambda x: "rch_gr" in x and "direct" in x), "parnme"]
    wel_par = par.loc[par.parnme.apply(
        lambda x: "wel_grid" in x and "direct" in x), "parnme"]
    par.loc[rch_par,"parval1"] = par.loc[rch_par, "parlbnd"]
    # this should set wells to zero since they are negative values in the control file
    par.loc[wel_par,"parval1"] = par.loc[wel_par, "parubnd"]
    pst.write(os.path.join(pf.new_d, "freyberg.pst"))
    pyemu.os_utils.run("{0} freyberg.pst".format(ies_exe_path), cwd=pf.new_d)
    lst = flopy.utils.Mf6ListBudget(os.path.join(pf.new_d, "freyberg6.lst"))
    flx, cum = lst.get_dataframes(diff=True)
    wel_tot = flx.wel.apply(np.abs).sum()
    print(flx.wel)
    assert wel_tot < 1.0e-6, wel_tot

    rch_files = [f for f in os.listdir(pf.new_d)
                 if ".rch_recharge" in f and f.endswith(".txt")]
    rch_val = par.loc[rch_par,"parval1"][0]
    i, j = par.loc[rch_par, ["i", 'j']].astype(int).values.T
    for rch_file in rch_files:
        arr = np.loadtxt(os.path.join(pf.new_d, rch_file))[i, j]
        print(rch_file, rch_val, arr.mean(), arr.max(), arr.min())
        if np.abs(arr.max() - rch_val) > 1.0e-6 or np.abs(arr.min() - rch_val) > 1.0e-6:
            raise Exception("recharge too diff")

def mf6_freyberg_varying_idomain():
    import numpy as np
    import pandas as pd
    pd.set_option('display.max_rows', 500)
    pd.set_option('display.max_columns', 500)
    pd.set_option('display.width', 1000)
    try:
        import flopy
    except:
        return

    org_model_ws = os.path.join('..', 'examples', 'freyberg_mf6')
    tmp_model_ws = "temp_pst_from"
    if os.path.exists(tmp_model_ws):
        shutil.rmtree(tmp_model_ws)
    os.mkdir(tmp_model_ws)
    sim = flopy.mf6.MFSimulation.load(sim_ws=org_model_ws)
    # sim.set_all_data_external()
    sim.simulation_data.mfpath.set_sim_path(tmp_model_ws)
    # sim.set_all_data_external()
    m = sim.get_model("freyberg6")
    sim.set_all_data_external(check_data=False)
    sim.write_simulation()

    #sim = None
    ib_file = os.path.join(tmp_model_ws,"freyberg6.dis_idomain_layer1.txt")
    arr = np.loadtxt(ib_file,dtype=np.int)

    arr[:2,:14] = 0
    np.savetxt(ib_file,arr,fmt="%2d")
    print(arr)

    sim = flopy.mf6.MFSimulation.load(sim_ws=tmp_model_ws)
    m = sim.get_model("freyberg6")

    # SETUP pest stuff...
    os_utils.run("{0} ".format(mf6_exe_path), cwd=tmp_model_ws)



    template_ws = "new_temp"

    # if os.path.exists(template_ws):
    #     shutil.rmtree(template_ws)
    # shutil.copytree(tmp_model_ws,template_ws)
    # hk_file = os.path.join(template_ws, "freyberg6.npf_k_layer1.txt")
    # hk = np.loadtxt(hk_file)
    #
    # hk[arr == 0] = 1.0e+30
    # np.savetxt(hk_file,hk,fmt="%50.45f")
    # os_utils.run("{0} ".format(mf6_exe_path), cwd=template_ws)
    # import matplotlib.pyplot as plt
    # hds1 = flopy.utils.HeadFile(os.path.join(tmp_model_ws, "freyberg6_freyberg.hds"))
    # hds2 = flopy.utils.HeadFile(os.path.join(template_ws, "freyberg6_freyberg.hds"))
    #
    # d = hds1.get_data() - hds2.get_data()
    # for dd in d:
    #     cb = plt.imshow(dd)
    #     plt.colorbar(cb)
    #     plt.show()
    # return

    # sr0 = m.sr
    # sr = pyemu.helpers.SpatialReference.from_namfile(
    #     os.path.join(tmp_model_ws, "freyberg6.nam"),
    #     delr=m.dis.delr.array, delc=m.dis.delc.array)

    sr = m.modelgrid
    # set up PstFrom object
    pf = PstFrom(original_d=tmp_model_ws, new_d=template_ws,
                 remove_existing=True,
                 longnames=True, spatial_reference=sr,
                 zero_based=False, start_datetime="1-1-2018")


    # pf.post_py_cmds.append("generic_function()")
    df = pd.read_csv(os.path.join(tmp_model_ws, "sfr.csv"), index_col=0)
    pf.add_observations("sfr.csv", insfile="sfr.csv.ins", index_cols="time", use_cols=list(df.columns.values),
                        ofile_sep=",")
    v = pyemu.geostats.ExpVario(contribution=1.0, a=1000)
    gr_gs = pyemu.geostats.GeoStruct(variograms=v)
    rch_temporal_gs = pyemu.geostats.GeoStruct(variograms=pyemu.geostats.ExpVario(contribution=1.0, a=60))
    pf.extra_py_imports.append('flopy')

    ib = {}
    for k in range(m.dis.nlay.data):
        a = m.dis.idomain.array[k,:,:].copy()
        print(a)
        ib[k] = a
    #return
    #ib[0][:2,:]  = 0

    tags = {"npf_k_": [0.1, 10.]}#, "npf_k33_": [.1, 10], "sto_ss": [.1, 10], "sto_sy": [.9, 1.1]}
    dts = pd.to_datetime("1-1-2018") + pd.to_timedelta(np.cumsum(sim.tdis.perioddata.array["perlen"]), unit="d")
    print(dts)
    for tag, bnd in tags.items():
        lb, ub = bnd[0], bnd[1]
        arr_files = [f for f in os.listdir(tmp_model_ws) if tag in f and f.endswith(".txt")]

        for arr_file in arr_files:

            # these ult bounds are used later in an assert
            ult_lb = None
            ult_ub = None
            k = int(arr_file.split(".")[-2].split("layer")[1].split("_")[0]) - 1
            pf.add_parameters(filenames=arr_file, par_type="pilotpoints", par_name_base=arr_file.split('.')[1] + "_pp",
                              pargp=arr_file.split('.')[1] + "_pp", upper_bound=ub, lower_bound=lb,
                              geostruct=gr_gs, zone_array=ib[k])

    # add model run command
    pf.mod_sys_cmds.append("mf6")
    df = pd.read_csv(os.path.join(tmp_model_ws, "heads.csv"), index_col=0)
    df = pf.add_observations("heads.csv", insfile="heads.csv.ins", index_cols="time", use_cols=list(df.columns.values),
                        prefix="hds", ofile_sep=",")

    # build pest
    pst = pf.build_pst('freyberg.pst')
    pst.control_data.noptmax = 0
    pst.write(os.path.join(pf.new_d, "freyberg.pst"))
    pyemu.os_utils.run("{0} freyberg.pst".format(ies_exe_path), cwd=pf.new_d)

    res_file = os.path.join(pf.new_d, "freyberg.base.rei")
    assert os.path.exists(res_file), res_file
    pst.set_res(res_file)
    print(pst.phi)
    assert pst.phi < 1.0e-6

if __name__ == "__main__":
    # freyberg_test()
    # freyberg_prior_build_test()
    #mf6_freyberg_test()
    #mf6_freyberg_shortnames_test()
    # mf6_freyberg_da_test()
    mf6_freyberg_direct_test()
    #mf6_freyberg_varying_idomain()
