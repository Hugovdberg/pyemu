:mod:`pyemu.en`
===============

.. py:module:: pyemu.en


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pyemu.en.Loc
   pyemu.en.Iloc
   pyemu.en.Ensemble
   pyemu.en.ObservationEnsemble
   pyemu.en.ParameterEnsemble



.. data:: SEED
   :annotation: = 358183147

   

.. py:class:: Loc(ensemble)

   Bases: :class:`object`

   thin wrapper around `pandas.DataFrame.loc` to make sure returned type
   is `Ensemble` (instead of `pandas.DataFrame)`

   :param ensemble: an ensemble instance
   :type ensemble: `pyemu.Ensemble`

   .. note::

      Users do not need to mess with this class - it is added
      to each `Ensemble` instance

   .. method:: __getitem__(self, item)


   .. method:: __setitem__(self, idx, value)



.. py:class:: Iloc(ensemble)

   Bases: :class:`object`

   thin wrapper around `pandas.DataFrame.iloc` to make sure returned type
   is `Ensemble` (instead of `pandas.DataFrame)`

   :param ensemble: an ensemble instance
   :type ensemble: `pyemu.Ensemble`

   .. note::

      Users do not need to mess with this class - it is added
      to each `Ensemble` instance

   .. method:: __getitem__(self, item)


   .. method:: __setitem__(self, idx, value)



.. py:class:: Ensemble(pst, df, istransformed=False)

   Bases: :class:`object`

   based class for handling ensembles of numeric values

   :param pst: a control file instance
   :type pst: `pyemu.Pst`
   :param df: a pandas dataframe.  Columns
              should be parameter/observation names.  Index is
              treated as realization names
   :type df: `pandas.DataFrame`
   :param istransformed: flag to indicate parameter values
                         are in log space.  Not used for `ObservationEnsemble`
   :type istransformed: `bool`

   Example::

       pst = pyemu.Pst("my.pst")
       pe = pyemu.ParameterEnsemble.from_gaussian_draw(pst)

   .. attribute:: _df
      

      the underlying dataframe that stores the realized values

      :type: `pandas.DataFrame`


   .. attribute:: pst
      

      control file instance

      :type: `pyemu.Pst`


   .. method:: __repr__(self)

      Return repr(self).


   .. method:: __str__(self)

      Return str(self).


   .. method:: __sub__(self, other)


   .. method:: __mul__(self, other)


   .. method:: __truediv__(self, other)


   .. method:: __add__(self, other)


   .. method:: __pow__(self, pow)


   .. method:: reseed()
      :staticmethod:

      reset the `numpy.random.seed`

      .. note:: reseeds using the pyemu.en.SEED global variable


   .. method:: copy(self)

      get a copy of `Ensemble`

      :returns: copy of this `Ensemble`
      :rtype: `Ensemble`

      .. note:: copies both `Ensemble.pst` and `Ensemble._df`


   .. method:: istransformed(self)
      :property:

      the parameter transformation status

      :returns: flag to indicate whether or not the `ParameterEnsemble` is
                transformed with respect to log_{10}.  Not used for (and has no effect
                on) `ObservationEnsemble`.
      :rtype: `bool`

      .. note::

         parameter transformation status is only related to log_{10} and does not
         include the effects of `scale` and/or `offset`


   .. method:: transform(self)

      transform parameters with respect to `partrans` value.

      .. note::

         operates in place (None is returned).
         
         Parameter transform is only related to log_{10} and does not
         include the effects of `scale` and/or `offset`
         
         `Ensemble.transform() is only provided for inhertance purposes.
         It only changes the `Ensemble._transformed` flag


   .. method:: back_transform(self)

      back transform parameters with respect to `partrans` value.

      .. note::

         operates in place (None is returned).
         
         Parameter transform is only related to log_{10} and does not
         include the effects of `scale` and/or `offset`
         
         `Ensemble.back_transform() is only provided for inhertance purposes.
         It only changes the `Ensemble._transformed` flag


   .. method:: __getattr__(self, item)


   .. method:: plot(self, bins=10, facecolor='0.5', plot_cols=None, filename='ensemble.pdf', func_dict=None, **kwargs)

      plot ensemble histograms to multipage pdf

      :param bins: number of bins for the histograms
      :type bins: `int`
      :param facecolor: matplotlib color (e.g. `r`,`g`, etc)
      :type facecolor: `str`
      :param plot_cols: list of subset of ensemble columns to plot.
                        If None, all are plotted. Default is None
      :type plot_cols: [`str`]
      :param filename: multipage pdf filename. Default is "ensemble.pdf"
      :type filename: `str`
      :param func_dict: a dict of functions to apply to specific
                        columns. For example: {"par1": np.log10}
      :type func_dict: `dict`
      :param \*\*kwargs: addkeyword args to pass to `pyemu.plot_utils.ensemble_helper()`
      :type \*\*kwargs: `dict`

      Example::

          pst = pyemu.Pst("my.pst")
          pe = pyemu.ParameterEnsemble.from_gaussian_draw(pst)
          pe.transform() # plot log space (if needed)
          pe.plot(bins=30)


   .. method:: from_binary(cls, pst, filename)
      :classmethod:

      create an `Ensemble` from a PEST-style binary file

      :param pst: a control file instance
      :type pst: `pyemu.Pst`
      :param filename: filename containing binary ensemble
      :type filename: `str`

      :returns: the ensembled loaded from the binary file
      :rtype: `Ensemble`

      Example::

          pst = pyemu.Pst("my.pst")
          oe = pyemu.ObservationEnsemble.from_binary("obs.jcb")



   .. method:: from_csv(cls, pst, filename, *args, **kwargs)
      :classmethod:

      create an `Ensemble` from a CSV file

      :param pst: a control file instance
      :type pst: `pyemu.Pst`
      :param filename: filename containing CSV ensemble
      :type filename: `str`
      :param \*args ([`object`]: positional arguments to pass to
                                 `pandas.read_csv()`.
      :param \*\*kwargs ({`str`: `object`}): keyword arguments to pass
                                 to `pandas.read_csv()`.

      :returns: `Ensemble`

      .. note::

         uses `pandas.read_csv()` to load numeric values from
         CSV file

      Example::

          pst = pyemu.Pst("my.pst")
          oe = pyemu.ObservationEnsemble.from_csv("obs.csv")


   .. method:: to_csv(self, filename, *args, **kwargs)

      write `Ensemble` to a CSV file

      :param filename: file to write
      :type filename: `str`
      :param \*args ([`object`]: positional arguments to pass to
                                 `pandas.DataFrame.to_csv()`.
      :param \*\*kwargs ({`str`: `object`}): keyword arguments to pass
                                 to `pandas.DataFrame.to_csv()`.

      Example::

          pst = pyemu.Pst("my.pst")
          oe = pyemu.ObservationEnsemble.from_gaussian_draw(pst)
          oe.to_csv("obs.csv")

      .. note::

         back transforms `ParameterEnsemble` before writing so that
         values are in arithmatic space


   .. method:: to_binary(self, filename)

      write `Ensemble` to a PEST-style binary file

      :param filename: file to write
      :type filename: `str`

      Example::

          pst = pyemu.Pst("my.pst")
          oe = pyemu.ObservationEnsemble.from_gaussian_draw(pst)
          oe.to_binary("obs.csv")

      .. note::

         back transforms `ParameterEnsemble` before writing so that
         values are in arithmatic space


   .. method:: from_dataframe(cls, pst, df, istransformed=False)
      :classmethod:


   .. method:: _gaussian_draw(cov, mean_values, num_reals, grouper=None, fill=True, factor='eigen')
      :staticmethod:


   .. method:: _get_svd_projection_matrix(x, maxsing=None, eigthresh=1e-07)
      :staticmethod:


   .. method:: _get_eigen_projection_matrix(x)
      :staticmethod:


   .. method:: get_deviations(self, center_on=None)

      get the deviations of the realizations around a certain
      point in ensemble space

      :param center_on: a realization name to use as the centering
                        point in ensemble space.  If `None`, the mean vector is
                        treated as the centering point.  Default is None
      :type center_on: `str`, optional

      :returns: an ensemble of deviations around the centering point
      :rtype: `Ensemble`

      .. note::

         deviations are the Euclidean distances from the `center_on` value to
         realized values for each column
         
         `center_on=None` yields the classic ensemble smoother/ensemble Kalman
         filter deviations
         
         Deviations respect log-transformation status.


   .. method:: as_pyemu_matrix(self, typ=None)

      get a `pyemu.Matrix` instance of `Ensemble`

      :param typ: the type of matrix to return.
                  Default is `pyemu.Matrix`
      :type typ: `pyemu.Matrix` or `pyemu.Cov`

      :returns: a matrix instance
      :rtype: `pyemu.Matrix`

      Example::

          pst = pyemu.Pst("my.pst")
          oe = pyemu.ObservationEnsemble.from_gaussian_draw(pst)
          oe.add_base()
          oe_dev = oe.get_deviations(center_on="base")
          oe.to_csv("obs_base_devs.csv")


   .. method:: covariance_matrix(self, localizer=None, center_on=None)

      get a empirical covariance matrix implied by the
      correlations between realizations

      :param localizer: a matrix to localize covariates
                        in the resulting covariance matrix.  Default is None
      :type localizer: `pyemu.Matrix`, optional
      :param center_on: a realization name to use as the centering
                        point in ensemble space.  If `None`, the mean vector is
                        treated as the centering point.  Default is None
      :type center_on: `str`, optional

      :returns: the empirical (and optionally localized) covariance matrix
      :rtype: `pyemu.Cov`


   .. method:: dropna(self, *args, **kwargs)

      override of `pandas.DataFrame.dropna()`

      :param \*args ([`object`]: positional arguments to pass to
                                 `pandas.DataFrame.dropna()`.
      :param \*\*kwargs ({`str`: `object`}): keyword arguments to pass
                                 to `pandas.DataFrame.dropna()`.



.. py:class:: ObservationEnsemble(pst, df, istransformed=False)

   Bases: :class:`pyemu.en.Ensemble`

   Observation noise ensemble in the PEST(++) realm

   :param pst: a control file instance
   :type pst: `pyemu.Pst`
   :param df: a pandas dataframe.  Columns
              should be observation names.  Index is
              treated as realization names
   :type df: `pandas.DataFrame`
   :param istransformed: flag to indicate parameter values
                         are in log space.  Not used for `ObservationEnsemble`
   :type istransformed: `bool`

   Example::

       pst = pyemu.Pst("my.pst")
       oe = pyemu.ObservationEnsemble.from_gaussian_draw(pst)

   .. method:: from_gaussian_draw(cls, pst, cov=None, num_reals=100, by_groups=True, fill=False, factor='eigen')
      :classmethod:

      generate an `ObservationEnsemble` from a (multivariate) gaussian
      distribution

      :param pst: a control file instance.
      :type pst: `pyemu.Pst`
      :param cov: a covariance matrix describing the second
                  moment of the gaussian distribution.  If None, `cov` is
                  generated from the non-zero-weighted observation weights in `pst`.
                  Only observations listed in `cov` are sampled.  Other observations are
                  assigned the `obsval` value from `pst`.
      :type cov: `pyemu.Cov`
      :param num_reals: number of stochastic realizations to generate.  Default
                        is 100
      :type num_reals: `int`
      :param by_groups: flag to generate realzations be observation group.  This
                        assumes no correlation (covariates) between observation groups.
      :type by_groups: `bool`
      :param fill: flag to fill in zero-weighted observations with control file
                   values.  Default is False.
      :type fill: `bool`
      :param factor: how to factorize `cov` to form the projectin matrix.  Can
                     be "eigen" or "svd". The "eigen" option is default and is faster.  But
                     for (nearly) singular cov matrices (such as those generated empirically
                     from ensembles), "svd" is the only way.  Ignored for diagonal `cov`.
      :type factor: `str`

      :returns: the realized `ObservationEnsemble` instance
      :rtype: `ObservationEnsemble`

      .. note::

         Only observations named in `cov` are sampled. Additional, `cov` is processed prior
         to sampling to only include non-zero-weighted observations depending on the value of `fill`.
         So users must take care to make sure observations have been assigned non-zero weights even if `cov`
         is being passed
         
         The default `cov` is generated from `pyemu.Cov.from_observation_data`, which assumes
         observation noise standard deviations are the inverse of the weights listed in `pst`

      Example::

          pst = pyemu.Pst("my.pst")
          # the easiest way - just relying on weights in pst
          oe1 = pyemu.ObservationEnsemble.from_gaussian_draw(pst)

          # generate the cov explicitly
          cov = pyemu.Cov.from_observation_data(pst)
          oe2 = pyemu.ObservationEnsemble.from_gaussian_draw(pst,cov=cov)

          # give all but one observation zero weight.  This will
          # result in an oe with only one randomly sampled observation noise
          # vector since the cov is processed to remove any zero-weighted
          # observations before sampling
          pst.observation_data.loc[pst.nnz_obs_names[1:],"weight] = 0.0
          oe3 = pyemu.ObservationEnsemble.from_gaussian_draw(pst,cov=cov)


   .. method:: phi_vector(self)
      :property:

      vector of L2 norm (phi) for the realizations (rows) of `Ensemble`.

      :returns: series of realization name (`Ensemble.index`) and phi values
      :rtype: `pandas.Series`

      .. note::

         The ObservationEnsemble.pst.weights can be updated prior to calling
         this method to evaluate new weighting strategies


   .. method:: add_base(self)

      add the control file `obsval` values as a realization

      .. note::

         replaces the last realization with the current `ObservationEnsemble.pst.observation_data.obsval` values
             as a new realization named "base"


   .. method:: nonzero(self)
      :property:

      get a new `ObservationEnsemble` of just non-zero weighted observations

      :returns: non-zero weighted observation ensemble.
      :rtype: `ObservationEnsemble`

      .. note::

         The `pst` attribute of the returned `ObservationEnsemble` also only includes
         non-zero weighted observations (and is therefore not valid for running
         with PEST or PEST++)



.. py:class:: ParameterEnsemble(pst, df, istransformed=False)

   Bases: :class:`pyemu.en.Ensemble`

   Parameter ensembles in the PEST(++) realm

   :param pst: a control file instance
   :type pst: `pyemu.Pst`
   :param df: a pandas dataframe.  Columns
              should be parameter names.  Index is
              treated as realization names
   :type df: `pandas.DataFrame`
   :param istransformed: flag to indicate parameter values
                         are in log space (if `partrans` is "log" in `pst`)
   :type istransformed: `bool`

   Example::

       pst = pyemu.Pst("my.pst")
       pe = pyemu.ParameterEnsemble.from_gaussian_draw(pst)

   .. method:: from_gaussian_draw(cls, pst, cov=None, num_reals=100, by_groups=True, fill=True, factor='eigen')
      :classmethod:

      generate a `ParameterEnsemble` from a (multivariate) (log) gaussian
      distribution

      :param pst: a control file instance.
      :type pst: `pyemu.Pst`
      :param cov: a covariance matrix describing the second
                  moment of the gaussian distribution.  If None, `cov` is
                  generated from the bounds of the adjustable parameters in `pst`.
                  the (log) width of the bounds is assumed to represent a multiple of
                  the parameter standard deviation (this is the `sigma_range` argument
                  that can be passed to `pyemu.Cov.from_parameter_data`).
      :type cov: `pyemu.Cov`
      :param num_reals: number of stochastic realizations to generate.  Default
                        is 100
      :type num_reals: `int`
      :param by_groups: flag to generate realzations be parameter group.  This
                        assumes no correlation (covariates) between parameter groups.  For large
                        numbers of parameters, this help prevent memories but is slower.
      :type by_groups: `bool`
      :param fill: flag to fill in fixed and/or tied parameters with control file
                   values.  Default is True.
      :type fill: `bool`
      :param factor: how to factorize `cov` to form the projectin matrix.  Can
                     be "eigen" or "svd". The "eigen" option is default and is faster.  But
                     for (nearly) singular cov matrices (such as those generated empirically
                     from ensembles), "svd" is the only way.  Ignored for diagonal `cov`.
      :type factor: `str`

      :returns: the parameter ensemble realized from the gaussian
                distribution
      :rtype: `ParameterEnsemble`

      .. note::

         Only parameters named in `cov` are sampled. Missing parameters are assigned values of
         `pst.parameter_data.parval1` along the corresponding columns of `ParameterEnsemble`
         according to the value of `fill`.
         
         The default `cov` is generated from `pyemu.Cov.from_observation_data`, which assumes
         parameter bounds in `ParameterEnsemble.pst` represent some multiple of parameter
         standard deviations.  Additionally, the default Cov only includes adjustable
         parameters (`partrans` not "tied" or "fixed").
         
         "tied" parameters are not sampled.

      Example::

          pst = pyemu.Pst("my.pst")
          # the easiest way - just relying on weights in pst
          oe1 = pyemu.ParameterEnsemble.from_gaussian_draw(pst)

          # generate the cov explicitly with a sigma_range
          cov = pyemu.Cov.from_parameter_data(pst,sigma_range=6)
          oe2 = pyemu.ParameterEnsemble.from_gaussian_draw(pst,cov=cov)


   .. method:: from_triangular_draw(cls, pst, num_reals=100, fill=True)
      :classmethod:

      generate a `ParameterEnsemble` from a (multivariate) (log) triangular distribution

      :param pst: a control file instance
      :type pst: `pyemu.Pst`
      :param num_reals: number of realizations to generate.  Default is 100
      :type num_reals: `int`, optional
      :param fill: flag to fill in fixed and/or tied parameters with control file
                   values.  Default is True.
      :type fill: `bool`

      :returns: a parameter ensemble drawn from the multivariate (log) triangular
                distribution defined by the parameter upper and lower bounds and initial parameter
                values in `pst`
      :rtype: `ParameterEnsemble`

      .. note::

         respects transformation status in `pst`: fixed and tied parameters are not realized,
         log-transformed parameters are drawn in log space.  The returned `ParameterEnsemble`
         is back transformed (not in log space)
         
         uses numpy.random.triangular

      Example::

          pst = pyemu.Pst("my.pst")
          pe = pyemu.ParameterEnsemble.from_triangular_draw(pst)
          pe.to_csv("my_tri_pe.csv")


   .. method:: from_uniform_draw(cls, pst, num_reals, fill=True)
      :classmethod:

      generate a `ParameterEnsemble` from a (multivariate) (log) uniform
      distribution

      :param pst: a control file instance
      :type pst: `pyemu.Pst`
      :param num_reals: number of realizations to generate.  Default is 100
      :type num_reals: `int`, optional
      :param fill: flag to fill in fixed and/or tied parameters with control file
                   values.  Default is True.
      :type fill: `bool`

      :returns: a parameter ensemble drawn from the multivariate (log) uniform
                distribution defined by the parameter upper and lower bounds `pst`
      :rtype: `ParameterEnsemble`

      .. note::

         respects transformation status in `pst`: fixed and tied parameters are not realized,
         log-transformed parameters are drawn in log space.  The returned `ParameterEnsemble`
         is back transformed (not in log space)
         
         uses numpy.random.uniform

      Example::

          pst = pyemu.Pst("my.pst")
          pe = pyemu.ParameterEnsemble.from_uniform_draw(pst)
          pe.to_csv("my_uni_pe.csv")



   .. method:: from_mixed_draws(cls, pst, how_dict, default='gaussian', num_reals=100, cov=None, sigma_range=6, enforce_bounds=True, partial=False, fill=True)
      :classmethod:

      generate a `ParameterEnsemble` using a mixture of
      distributions.  Available distributions include (log) "uniform", (log) "triangular",
      and (log) "gaussian". log transformation is respected.

      :param pst: a control file
      :type pst: `pyemu.Pst`
      :param how_dict: a dictionary of parameter name keys and
                       "how" values, where "how" can be "uniform","triangular", or "gaussian".
      :type how_dict: `dict`
      :param default: the default distribution to use for parameter not listed
                      in how_dict.  Default is "gaussian".
      :type default: `str`
      :param num_reals: number of realizations to draw.  Default is 100.
      :type num_reals: `int`
      :param cov: an optional Cov instance to use for drawing from gaussian distribution.
                  If None, and "gaussian" is listed in `how_dict` (and/or `default`), then a diagonal
                  covariance matrix is constructed from the parameter bounds in `pst` (with `sigma_range`).
                  Default is None.
      :type cov: `pyemu.Cov`
      :param sigma_range: the number of standard deviations implied by the parameter bounds in the pst.
                          Only used if "gaussian" is in `how_dict` (and/or `default`) and `cov` is None.  Default is 6.
      :type sigma_range: `float`
      :param enforce_bounds: flag to enforce parameter bounds in resulting `ParameterEnsemble`. Only
                             matters if "gaussian" is in values of `how_dict`.  Default is True.
      :type enforce_bounds: `bool`
      :param partial: flag to allow a partial ensemble (not all pars included).  If True, parameters
                      not name in `how_dict` will be sampled using the distribution named as `default`.
                      Default is `False`.
      :type partial: `bool`
      :param fill: flag to fill in fixed and/or tied parameters with control file
                   values.  Default is True.
      :type fill: `bool`


   .. method:: from_parfiles(cls, pst, parfile_names, real_names=None)
      :classmethod:

      create a parameter ensemble from PEST-style parameter value files.
      Accepts parfiles with less than the parameters in the control
      (get NaNs in the ensemble) or extra parameters in the
      parfiles (get dropped)

      :param pst: control file instance
      :type pst: `pyemu.Pst`
      :param parfile_names: par file names
      :type parfile_names: `[str`]
      :param real_names: optional list of realization names.
                         If None, a single integer counter is used
      :type real_names: `str`

      :returns: parameter ensemble loaded from par files
      :rtype: `ParameterEnsemble`


   .. method:: back_transform(self)

      back transform parameters with respect to `partrans` value.

      .. note::

         operates in place (None is returned).
         
         Parameter transform is only related to log_{10} and does not
         include the effects of `scale` and/or `offset`


   .. method:: transform(self)

      transform parameters with respect to `partrans` value.

      .. note::

         operates in place (None is returned).
         
         Parameter transform is only related to log_{10} and does not
         include the effects of `scale` and/or `offset`


   .. method:: add_base(self)

      add the control file `obsval` values as a realization

      .. note::

         replaces the last realization with the current `ParameterEnsemble.pst.parameter_data.parval1` values
         as a new realization named "base"


   .. method:: adj_names(self)
      :property:

      the names of adjustable parameters in `ParameterEnsemble`

      :returns: adjustable parameter names
      :rtype: [`str`]


   .. method:: ubnd(self)
      :property:

      the upper bound vector while respecting current log transform status

      :returns: (log-transformed) upper parameter bounds listed in
                `ParameterEnsemble.pst.parameter_data.parubnd`
      :rtype: `pandas.Series`


   .. method:: lbnd(self)
      :property:

      the lower bound vector while respecting current log transform status

      :returns: (log-transformed) lower parameter bounds listed in
                `ParameterEnsemble.pst.parameter_data.parlbnd`
      :rtype: `pandas.Series`


   .. method:: log_indexer(self)
      :property:

      boolean indexer for log transform

      :returns: boolean array indicating which parameters are log
                transformed
      :rtype: `numpy.ndarray(bool)`


   .. method:: fixed_indexer(self)
      :property:

      boolean indexer for non-adjustable parameters

      :returns: boolean array indicating which parameters have
                `partrans` equal to "log" or "fixed"
      :rtype: `numpy.ndarray(bool)`


   .. method:: project(self, projection_matrix, center_on=None, log=None, enforce_bounds='reset')

      project the ensemble using the null-space Monte Carlo method

      :param projection_matrix: null-space projection operator.
      :type projection_matrix: `pyemu.Matrix`
      :param center_on: the name of the realization to use as the centering
                        point for the null-space differening operation.  If `center_on` is `None`,
                        the `ParameterEnsemble` mean vector is used.  Default is `None`
      :type center_on: `str`
      :param log: for logging progress
      :type log: `pyemu.Logger`, optional
      :param enforce_bounds: parameter bound enforcement option to pass to
                             `ParameterEnsemble.enforce()`.  Valid options are `reset`, `drop`,
                             `scale` or `None`.  Default is `reset`.
      :type enforce_bounds: `str`

      :returns: untransformed, null-space projected ensemble.
      :rtype: `ParameterEnsemble`

      Example::

          ev = pyemu.ErrVar(jco="my.jco") #assumes my.pst exists
          pe = pyemu.ParameterEnsemble.from_gaussian_draw(ev.pst)
          pe_proj = pe.project(ev.get_null_proj(maxsing=25))
          pe_proj.to_csv("proj_par.csv")


   .. method:: enforce(self, how='reset', bound_tol=0.0)

      entry point for bounds enforcement.  This gets called for the
      draw method(s), so users shouldn't need to call this

      :param enforce_bounds: can be 'reset' to reset offending values or 'drop' to drop
                             offending realizations
      :type enforce_bounds: `str`

      Example::

          pst = pyemu.Pst("my.pst")
          pe = pyemu.ParameterEnsemble.from_gaussian_draw()
          pe.enforce(how="scale)
          pe.to_csv("par.csv")



   .. method:: _enforce_scale(self, bound_tol)


   .. method:: _enforce_drop(self, bound_tol)

      enforce parameter bounds on the ensemble by dropping
      violating realizations

      .. note::

         with a large (realistic) number of parameters, the
         probability that any one parameter is out of
         bounds is large, meaning most realization will
         be dropped.


   .. method:: _enforce_reset(self, bound_tol)

      enforce parameter bounds on the ensemble by resetting
      violating vals to bound



