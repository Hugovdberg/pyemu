:mod:`pyemu.ev`
===============

.. py:module:: pyemu.ev


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pyemu.ev.ErrVar



.. py:class:: ErrVar(jco, **kwargs)

   Bases: :class:`pyemu.la.LinearAnalysis`

   FOSM-based error variance analysis

   :param jco: something that can be cast or loaded into a `pyemu.Jco`.  Can be a
               str for a filename or `pyemu.Matrix`/`pyemu.Jco` object.
   :type jco: varies, optional
   :param pst: something that can be cast into a `pyemu.Pst`.  Can be an `str` for a
               filename or an existing `pyemu.Pst`.  If `None`, a pst filename is sought
               with the same base name as the jco argument (if passed)
   :type pst: varies, optional
   :param parcov: prior parameter covariance matrix.  If `str`, a filename is assumed and
                  the prior parameter covariance matrix is loaded from a file using
                  the file extension (".jcb"/".jco" for binary, ".cov"/".mat" for PEST-style ASCII matrix,
                  or ".unc" for uncertainty files).  If `None`, the prior parameter covariance matrix is
                  constructed from the parameter bounds in `LinearAnalysis.pst`.  Can also be a `pyemu.Cov` instance
   :type parcov: varies, optional
   :param obscov: observation noise covariance matrix.  If `str`, a filename is assumed and
                  the noise covariance matrix is loaded from a file using
                  the file extension (".jcb"/".jco" for binary, ".cov"/".mat" for PEST-style ASCII matrix,
                  or ".unc" for uncertainty files).  If `None`, the noise covariance matrix is
                  constructed from the obsevation weights in `LinearAnalysis.pst`.  Can also be a `pyemu.Cov` instance
   :type obscov: varies, optional
   :param forecasts: forecast sensitivity vectors.  If `str`, first an observation name is assumed (a row
                     in `LinearAnalysis.jco`).  If that is not found, a filename is assumed and predictions are
                     loaded from a file using the file extension.  If [`str`], a list of observation names is assumed.
                     Can also be a `pyemu.Matrix` instance, a `numpy.ndarray` or a collection.  Note if the PEST++ option
                     "++forecasts()" is set in the pest control file (under the `pyemu.Pst.pestpp_options` dictionary),
                     then there is no need to pass this argument (unless you want to analyze different forecasts)
                     of `pyemu.Matrix` or `numpy.ndarray`.
   :type forecasts: varies, optional
   :param ref_var: reference variance.  Default is 1.0
   :type ref_var: float, optional
   :param verbose: controls screen output.  If `str`, a filename is assumed and
                   and log file is written.
   :type verbose: `bool`
   :param sigma_range: defines range of upper bound - lower bound in terms of standard
                       deviation (sigma). For example, if sigma_range = 4, the bounds represent 4 * sigma.
                       Default is 4.0, representing approximately 95% confidence of implied normal distribution.
                       This arg is only used if constructing parcov from parameter bounds.
   :type sigma_range: `float`, optional
   :param scale_offset: flag to apply parameter scale and offset to parameter bounds
                        when calculating prior parameter covariance matrix from bounds.  This arg is onlyused if
                        constructing parcov from parameter bounds.Default is True.
   :type scale_offset: `bool`, optional
   :param omitted_parameters: list of parameters to treat as "omitted".  Passing this argument
                              activates 3-term error variance analysis.
   :type omitted_parameters: [`str`]
   :param omitted_parcov: an argument that can be cast to a parcov for the omitted parameters.
                          If None, omitted_parcov will be formed by extracting a sub-matrix from the `LinearAnalsis.parcov`
                          attribute.
   :type omitted_parcov: varies
   :param omitted_predictions: an argument that can be cast to a "predictions" (e.g. "forecasts")
                               attribute to form prediction sensitivity vectors with respec to the omitted parameters.  If None,
                               these vectors will be extracted from the `pyemu.LinearAnalysis.predictions` attribute
   :type omitted_predictions: varies
   :param kl: flag to perform Karhunen-Loeve scaling on the jacobian before error variance
              calculations. If `True`, the `pyemu.ErrVar.jco` and `pyemu.ErrVar.parcov` are altered in place.
              Default is `False`.
   :type kl: `bool`, optional

   Example::

       ev = pyemu.ErrVar(jco="my.jco",omitted_parameters=["wel1","wel2"])
       df = ev.get_errvar_dataframe()

   .. method:: __load_omitted_predictions(self)

      private: set the omitted_predictions attribute


   .. method:: __load_omitted_parcov(self)

      private: set the omitted_parcov attribute


   .. method:: __load_omitted_jco(self)

      private: set the omitted jco attribute


   .. method:: omitted_predictions(self)
      :property:

      omitted prediction sensitivity vectors

      :returns: a matrix of prediction sensitivity vectors (column wise) to
                omitted parameters
      :rtype: `pyemu.Matrix`


   .. method:: omitted_jco(self)
      :property:

      the omitted-parameters jacobian matrix

      :returns: the jacobian matrix instance of non-zero-weighted observations and
                omitted parameters
      :rtype: `pyemu.Jco`


   .. method:: omitted_parcov(self)
      :property:

      the prior omitted-parameter covariance matrix

      :returns: the prior parameter covariance matrix of the
                omitted parameters
      :rtype: `pyemu.Cov`


   .. method:: get_errvar_dataframe(self, singular_values=None)

      primary entry point for error variance analysis.

      :param singular_values: a list singular values to test. If `None`,
                              defaults to `range(0,min(nnz_obs,nadj_par) + 1)`.
      :type singular_values: [`int`], optional

      :returns: a multi-indexed pandas dataframe summarizing each of the
                error variance terms for each nominated forecast. Rows are the singluar values
                tested, columns are a multi-index of forecast name and error variance term number
                (e.g. 1,2 or (optionally) 3).
      :rtype: `pandas.DataFrame`

      Example::

          ev = pyemu.ErrVar(jco="my.jco",omitted_parameters=["wel1","wel2"])
          df = ev.get_errvar_dataframe()


   .. method:: get_identifiability_dataframe(self, singular_value=None, precondition=False)

      primary entry point for identifiability analysis

      :param singular_value: the singular spectrum truncation point. Defaults
                             to minimum of non-zero-weighted observations and adjustable parameters
      :type singular_value: `int`
      :param precondition: flag to use the preconditioned hessian with the prior
                           parameter covariance matrix (xtqt + sigma_theta^-1).  This should be used
                           KL scaling. Default is `False`.
      :type precondition: `bool`

      :returns: A pandas dataframe of the right solution-space singular
                vectors and identifiability (identifiabiity is in the column labeled "ident")
      :rtype: `pandas.DataFrame`

      Examples::

          ev = pyemu.ErrVar(jco="my.jco")
          df = ev.get_identifiability_dataframe(singular_value=20)
          df.ident.plot(kind="bar")


   .. method:: variance_at(self, singular_value)

      get the error variance of all three error variance terms at a
       given singluar value

      :param singular_value: singular value to test
      :type singular_value: `int`

      :returns: dictionary of (err var term,prediction_name), variance pairs
      :rtype: `dict`


   .. method:: R(self, singular_value)

      get resolution Matrix (V_1 * V_1^T) at a given singular value

      Args:
      singular_value (`int`): singular value to calculate `R` at

      :returns: resolution matrix at `singular_value`
      :rtype: `pyemu.Matrix`


   .. method:: I_minus_R(self, singular_value)

      get I - R at a given singular value

      :param singular_value: singular value to calculate I - R at
      :type singular_value: `int`

      :returns: identity matrix minus resolution matrix at `singular_value`
      :rtype: `pyemu.Matrix`


   .. method:: G(self, singular_value)

      get the parameter solution Matrix at a given singular value

      :param singular_value: singular value to calc G at
      :type singular_value: `int`

      :returns: parameter solution matrix  (V_1 * S_1^(_1) * U_1^T) at `singular_value`
      :rtype: `pyemu.Matrix`


   .. method:: first_forecast(self, singular_value)

      get the null space term (first term) contribution to forecast (e.g. prediction)
       error variance at a given singular value.

      :param singular_value: singular value to calc first term at
      :type singular_value: `int`

      .. note::

         This method is used to construct the error variance dataframe
         
         Just a wrapper around `ErrVar.first_forecast`

      :returns: dictionary of ("first",prediction_names),error variance pairs at `singular_value`
      :rtype: `dict`


   .. method:: first_prediction(self, singular_value)

      get the null space term (first term) contribution to prediction error variance
          at a given singular value.

      :param singular_value: singular value to calc first term at
      :type singular_value: `int`

      .. note:: This method is used to construct the error variance dataframe

      :returns: dictionary of ("first",prediction_names),error variance pairs at `singular_value`
      :rtype: `dict`


   .. method:: first_parameter(self, singular_value)

      get the null space term (first term) contribution to parameter error variance
          at a given singular value

      :param singular_value: singular value to calc first term at
      :type singular_value: `int`

      :returns: first term contribution to parameter error variance
      :rtype: `pyemu.Cov`


   .. method:: second_forecast(self, singular_value)

      get the solution space contribution to forecast (e.g. "prediction") error variance
      at a given singular value

      :param singular_value: singular value to calc second term at
      :type singular_value: `int`

      .. note::

         This method is used to construct error variance dataframe
         
         Just a thin wrapper around `ErrVar.second_prediction`

      :returns: dictionary of ("second",prediction_names), error variance
                arising from the solution space contribution (y^t * G * obscov * G^T * y)
      :rtype: `dict`


   .. method:: second_prediction(self, singular_value)

      get the solution space contribution to predictive error variance
      at a given singular value

      :param singular_value: singular value to calc second term at
      :type singular_value: `int`

      .. note:: This method is used to construct error variance dataframe

      Returns:            `dict`:  dictionary of ("second",prediction_names), error variance
          arising from the solution space contribution (y^t * G * obscov * G^T * y)


   .. method:: second_parameter(self, singular_value)

      get the solution space contribution to parameter error variance
           at a given singular value (G * obscov * G^T)

      :param singular_value: singular value to calc second term at
      :type singular_value: `int`

      :returns: the second term contribution to parameter error variance
                (G * obscov * G^T)
      :rtype: `pyemu.Cov`


   .. method:: third_forecast(self, singular_value)

      get the omitted parameter contribution to forecast (`prediction`) error variance
       at a given singular value.

      :param singular_value: singular value to calc third term at
      :type singular_value: `int`

      .. note::

         used to construct error variance dataframe
         just a thin wrapper around `ErrVar.third_prediction()`

      :returns: a dictionary of ("third",prediction_names),error variance
      :rtype: `dict`


   .. method:: third_prediction(self, singular_value)

      get the omitted parameter contribution to prediction error variance
       at a given singular value.

      :param singular_value: singular value to calc third term at
      :type singular_value: `int`

      .. note:: used to construct error variance dataframe

      :returns: a dictionary of ("third",prediction_names),error variance
      :rtype: `dict`


   .. method:: third_parameter(self, singular_value)

      get the omitted parameter contribution to parameter error variance
           at a given singular value

      :param singular_value: singular value to calc third term at
      :type singular_value: `int`

      :returns: the third term contribution to parameter error variance
                calculated at `singular_value` (G * omitted_jco * Sigma_(omitted_pars) *
                omitted_jco^T * G^T).  Returns 0.0 if third term calculations are not
                being used.
      :rtype: `pyemu.Cov`


   .. method:: get_null_proj(self, maxsing=None, eigthresh=1e-06)

      get a null-space projection matrix of XTQX

      :param maxsing: number of singular components
                      to use (the truncation point).  If None, `pyemu.Matrx.get_maxsing()
                      is used to determine the truncation point with `eigthresh`. Default
                      is None
      :type maxsing: `int`, optional
      :param eigthresh: the ratio of smallest to largest singular
                        value to keep in the range (solution) space of XtQX.  Not used if
                        `maxsing` is not `None`.  Default is 1.0e-6
      :type eigthresh: `float`, optional

      .. note:: used for null-space monte carlo operations.

      :returns: `pyemu.Matrix` the null-space projection matrix (V2V2^T)



