:mod:`pyemu.utils.pp_utils`
===========================

.. py:module:: pyemu.utils.pp_utils

.. autoapi-nested-parse::

   Pilot point support utilities



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   pyemu.utils.pp_utils.setup_pilotpoints_grid
   pyemu.utils.pp_utils.pp_file_to_dataframe
   pyemu.utils.pp_utils.pp_tpl_to_dataframe
   pyemu.utils.pp_utils.write_pp_shapfile
   pyemu.utils.pp_utils.write_pp_file
   pyemu.utils.pp_utils.pilot_points_to_tpl


.. data:: max_colwidth
   :annotation: = 100

   

.. data:: PP_FMT
   

   

.. data:: PP_NAMES
   :annotation: = ['name', 'x', 'y', 'zone', 'parval1']

   

.. function:: setup_pilotpoints_grid(ml=None, sr=None, ibound=None, prefix_dict=None, every_n_cell=4, ninst=1, use_ibound_zones=False, pp_dir='.', tpl_dir='.', shapename='pp.shp', longnames=False)

   setup a regularly-spaced (gridded) pilot point parameterization

   :param ml: a flopy mbase dervied type.  If None, `sr` must not be None.
   :type ml: `flopy.mbase`, optional
   :param sr: a spatial reference use to
              locate the model grid in space.  If None, `ml` must not be None.  Default is None
   :type sr: `flopy.utils.reference.SpatialReference`, optional
   :param ibound: the modflow ibound integer array.  THis is used to
                  set pilot points only in active areas. If None and ml is None, then pilot points
                  are set in all rows and columns according to `every_n_cell`.  Default is None.
   :type ibound: `numpy.ndarray`, optional
   :param prefix_dict: a dictionary of layer index, pilot point parameter prefix(es) pairs.
                       For example : `{0:["hk,"vk"]}` would setup pilot points with the prefix "hk" and "vk" for
                       model layer 1. If None, a generic set of pilot points with
                       the "pp" prefix are setup for a generic nrow by ncol grid. Default is None
   :type prefix_dict: `dict`
   :param ninst: Number of instances of pilot_points to set up.
                 e.g. number of layers. If ml is None and prefix_dict is None,
                 this is used to set up default prefix_dict.
   :type ninst: `int`
   :param use_ibound_zones: a flag to use the greater-than-zero values in the
                            ibound as pilot point zones.  If False ,ibound values greater than zero are
                            treated as a single zone.  Default is False.
   :type use_ibound_zones: `bool`
   :param pp_dir: directory to write pilot point files to.  Default is '.'
   :type pp_dir: `str`, optional
   :param tpl_dir: directory to write pilot point template file to.  Default is '.'
   :type tpl_dir: `str`, optional
   :param shapename: name of shapefile to write that contains pilot
                     point information. Default is "pp.shp"
   :type shapename: `str`, optional

   :returns: a dataframe summarizing pilot point information (same information
             written to `shapename`
   :rtype: `pandas.DataFrame`

   Example::

       m = flopy.modflow.Modflow.load("my.nam")
       df = pyemu.pp_utils.setup_pilotpoints_grid(ml=m)


.. function:: pp_file_to_dataframe(pp_filename)

   read a pilot point file to a pandas Dataframe

   :param pp_filename: path and name of an existing pilot point file
   :type pp_filename: `str`

   :returns: a dataframe with `pp_utils.PP_NAMES` for columns
   :rtype: `pandas.DataFrame`

   Example::

       df = pyemu.pp_utils.pp_file_to_dataframe("my_pp.dat")


.. function:: pp_tpl_to_dataframe(tpl_filename)

   read a pilot points template file to a pandas dataframe

   :param tpl_filename: path and name of an existing pilot points
                        template file
   :type tpl_filename: `str`

   :returns: a dataframe of pilot point info with "parnme" included
   :rtype: `pandas.DataFrame`

   .. rubric:: Notes

   Use for processing pilot points since the point point file itself may
   have generic "names".

   Example::

       df = pyemu.pp_utils.pp_tpl_file_to_dataframe("my_pp.dat.tpl")


.. function:: write_pp_shapfile(pp_df, shapename=None)

   write pilot points dataframe to a shapefile

   :param pp_df: pilot point dataframe (must include "x" and "y"
                 columns).  If `pp_df` is a string, it is assumed to be a pilot points file
                 and is loaded with `pp_utils.pp_file_to_dataframe`. Can also be a list of
                 `pandas.DataFrames` and/or filenames.
   :type pp_df: `pandas.DataFrame`
   :param shapename: the shapefile name to write.  If `None` , `pp_df` must be a string
                     and shapefile is saved as `pp_df` +".shp"
   :type shapename: `str`

   .. rubric:: Notes

   requires pyshp


.. function:: write_pp_file(filename, pp_df)

   write a pilot points dataframe to a pilot points file

   :param filename: pilot points file to write
   :type filename: `str`
   :param pp_df: a dataframe that has
                 at least columns "x","y","zone", and "value"
   :type pp_df: `pandas.DataFrame`


.. function:: pilot_points_to_tpl(pp_file, tpl_file=None, name_prefix=None, longnames=False)

   write a template file for a pilot points file

   :param pp_file: (`str`): existing pilot points file
   :param tpl_file: template file name to write.  If None,
                    `pp_file`+".tpl" is used.  Default is `None`.
   :type tpl_file: `str`
   :param name_prefix: name to prepend to parameter names for each
                       pilot point.  For example, if `name_prefix = "hk_"`, then each
                       pilot point parameters will be named "hk_0001","hk_0002", etc.
                       If None, parameter names from `pp_df.name` are used.
                       Default is None.
   :type name_prefix: `str`

   :returns: a dataframe with pilot point information
             (name,x,y,zone,parval1) with the parameter information
             (parnme,tpl_str)
   :rtype: `pandas.DataFrame`


