:mod:`pyemu.utils.smp_utils`
============================

.. py:module:: pyemu.utils.smp_utils

.. autoapi-nested-parse::

   PEST-style site sample (smp) file support utilities



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   pyemu.utils.smp_utils.smp_to_ins
   pyemu.utils.smp_utils.dataframe_to_smp
   pyemu.utils.smp_utils._date_parser
   pyemu.utils.smp_utils.smp_to_dataframe


.. function:: smp_to_ins(smp_filename, ins_filename=None, use_generic_names=False, gwutils_compliant=False, datetime_format=None, prefix='')

   create an instruction file for an smp file

   :param smp_filename: path and name of an existing smp file
   :type smp_filename: `str`
   :param ins_filename: the name of the instruction
                        file to create.  If None, `smp_filename` +".ins" is used.
                        Default is None.
   :type ins_filename: `str`, optional
   :param use_generic_names: flag to force observations names
                             to use a generic `int` counter instead of trying to use a
                             datetime string.  Default is False
   :type use_generic_names: `bool`
   :param gwutils_compliant: flag to use instruction set that
                             is compliant with the PEST gw utils (fixed format instructions).
                             If false, use free format (with whitespace) instruction set.
                             Default is False
   :type gwutils_compliant: `bool`
   :param datetime_format: string to pass to datetime.strptime in
                           the `smp_utils.smp_to_dataframe()` function.  If None, not
                           used. Default is None.
   :type datetime_format: `str`
   :param prefix: a prefix to add to the front of the derived
                  observation names.  Default is ''
   :type prefix: `str`

   :returns: a dataframe of the smp file
             information with the observation names and
             instruction lines as additional columns.
   :rtype: `pandas.DataFrame`

   Example::

       df = pyemu.smp_utils.smp_to_ins("my.smp")


.. function:: dataframe_to_smp(dataframe, smp_filename, name_col='name', datetime_col='datetime', value_col='value', datetime_format='dd/mm/yyyy', value_format='{0:15.6E}', max_name_len=12)

   write a dataframe as an smp file

   :param dataframe: the dataframe to write to an SMP
                     file.  This dataframe should be in "long" form - columns for
                     site name, datetime, and value.
   :type dataframe: `pandas.DataFrame`
   :param smp_filename: smp file to write
   :type smp_filename: `str`
   :param name_col: the name of the dataframe column
                    that contains the site name.  Default is "name"
   :type name_col: `str`,optional
   :param datetime_col: the column in the dataframe that the
                        datetime values.  Default is "datetime".
   :type datetime_col: `str`
   :param value_col: the column in the dataframe that is the values
   :type value_col: `str`
   :param datetime_format: The format to write the datetimes in the
                           smp file.  Can be either 'dd/mm/yyyy' or 'mm/dd/yyy'.  Default
                           is 'dd/mm/yyyy'.
   :type datetime_format: `str`, optional
   :param value_format: a python float-compatible format.
                        Default is "{0:15.6E}".
   :type value_format: `str`, optional

   Example::

       pyemu.smp_utils.dataframe_to_smp(df,"my.smp")


.. function:: _date_parser(items)

   datetime parser to help load smp files


.. function:: smp_to_dataframe(smp_filename, datetime_format=None)

   load an smp file into a pandas dataframe

   :param smp_filename: path and nane of existing smp filename to load
   :type smp_filename: `str`
   :param datetime_format: The format of the datetime strings
                           in the smp file. Can be either "%m/%d/%Y %H:%M:%S" or "%d/%m/%Y %H:%M:%S"
                           If None, then we will try to deduce the format for you, which
                           always dangerous.
   :type datetime_format: `str`, optional

   :returns: a dataframe with index of datetime and columns of
             site names.  Missing values are set to NaN.
   :rtype: `pandas.DataFrame`

   Example::

       df = smp_to_dataframe("my.smp")


