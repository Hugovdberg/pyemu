:mod:`pyemu.la`
===============

.. py:module:: pyemu.la

.. autoapi-nested-parse::

   LinearAnalysis object, which is the base class for other
   pyemu analysis objects (Schur, ErrVar, MonteCarlo, and EnsembleSmoother).
   This class is usually not used directly.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pyemu.la.LinearAnalysis



.. py:class:: LinearAnalysis(jco=None, pst=None, parcov=None, obscov=None, predictions=None, ref_var=1.0, verbose=False, resfile=False, forecasts=None, sigma_range=4.0, scale_offset=True, **kwargs)

   Bases: :class:`object`

   The base/parent class for linear analysis.

   :param jco: something that can be cast or loaded into a `pyemu.Jco`.  Can be a
               str for a filename or `pyemu.Matrix`/`pyemu.Jco` object.
   :type jco: varies, optional
   :param pst: something that can be cast into a `pyemu.Pst`.  Can be an `str` for a
               filename or an existing `pyemu.Pst`.  If `None`, a pst filename is sought
               with the same base name as the jco argument (if passed)
   :type pst: varies, optional
   :param parcov: prior parameter covariance matrix.  If `str`, a filename is assumed and
                  the prior parameter covariance matrix is loaded from a file using
                  the file extension (".jcb"/".jco" for binary, ".cov"/".mat" for PEST-style ASCII matrix,
                  or ".unc" for uncertainty files).  If `None`, the prior parameter covariance matrix is
                  constructed from the parameter bounds in `LinearAnalysis.pst`.  Can also be a `pyemu.Cov` instance
   :type parcov: varies, optional
   :param obscov: observation noise covariance matrix.  If `str`, a filename is assumed and
                  the noise covariance matrix is loaded from a file using
                  the file extension (".jcb"/".jco" for binary, ".cov"/".mat" for PEST-style ASCII matrix,
                  or ".unc" for uncertainty files).  If `None`, the noise covariance matrix is
                  constructed from the obsevation weights in `LinearAnalysis.pst`.  Can also be a `pyemu.Cov` instance
   :type obscov: varies, optional
   :param forecasts: forecast sensitivity vectors.  If `str`, first an observation name is assumed (a row
                     in `LinearAnalysis.jco`).  If that is not found, a filename is assumed and predictions are
                     loaded from a file using the file extension.  If [`str`], a list of observation names is assumed.
                     Can also be a `pyemu.Matrix` instance, a `numpy.ndarray` or a collection
                     of `pyemu.Matrix` or `numpy.ndarray`.
   :type forecasts: varies, optional
   :param ref_var: reference variance.  Default is 1.0
   :type ref_var: float, optional
   :param verbose: controls screen output.  If `str`, a filename is assumed and
                   and log file is written.
   :type verbose: `bool`
   :param sigma_range: defines range of upper bound - lower bound in terms of standard
                       deviation (sigma). For example, if sigma_range = 4, the bounds represent 4 * sigma.
                       Default is 4.0, representing approximately 95% confidence of implied normal distribution.
                       This arg is only used if constructing parcov from parameter bounds.
   :type sigma_range: `float`, optional
   :param scale_offset: flag to apply parameter scale and offset to parameter bounds
                        when calculating prior parameter covariance matrix from bounds.  This arg is onlyused if
                        constructing parcov from parameter bounds.Default is True.
   :type scale_offset: `bool`, optional

   .. note::

      Can be used directly, but for prior uncertainty analyses only.
      
      The derived types (`pyemu.Schur`, `pyemu.ErrVar`) are for different
      forms of FOMS-based posterior uncertainty analyses.
      
      This class tries hard to not load items until they are needed; all arguments are optional.
      
      The class makes heavy use of property decorator to encapsulated private attributes

   Example::

       #assumes "my.pst" exists
       la = pyemu.LinearAnalysis(jco="my.jco",forecasts=["fore1","fore2"])
       print(la.prior_forecast)


   .. method:: __fromfile(self, filename, astype=None)

      a private method to deduce and load a filename into a matrix object.
      Uses extension: 'jco' or 'jcb': binary, 'mat','vec' or 'cov': ASCII,
      'unc': pest uncertainty file.


   .. method:: __load_pst(self)

      private method set the pst attribute


   .. method:: __load_jco(self)

      private method to set the jco attribute from a file or a matrix object


   .. method:: __load_parcov(self)

      private method to set the parcov attribute from:
      a pest control file (parameter bounds)
      a pst object
      a matrix object
      an uncert file
      an ascii matrix file


   .. method:: __load_obscov(self)

      private method to set the obscov attribute from:
      a pest control file (observation weights)
      a pst object
      a matrix object
      an uncert file
      an ascii matrix file


   .. method:: __load_predictions(self)

      private method set the predictions attribute from:
          mixed list of row names, matrix files and ndarrays
          a single row name
          an ascii file
      can be none if only interested in parameters.


   .. method:: forecast_names(self)
      :property:

      get the forecast (aka prediction) names

      :returns: list of forecast names
      :rtype: ([`str`])


   .. method:: parcov(self)
      :property:

      get the prior parameter covariance matrix attribute

      :returns: a reference to the `LinearAnalysis.parcov` attribute
      :rtype: `pyemu.Cov`


   .. method:: obscov(self)
      :property:

      get the observation noise covariance matrix attribute

      :returns: a reference to the `LinearAnalysis.obscov` attribute
      :rtype: `pyemu.Cov`


   .. method:: nnz_obs_names(self)
      :property:

      non-zero-weighted observation names

      :returns: list of non-zero-weighted observation names
      :rtype: ['str`]

      .. note:: if `LinearAnalysis.pst` is `None`, returns `LinearAnalysis.jco.row_names`


   .. method:: adj_par_names(self)
      :property:

      adjustable parameter names

      :returns: list of adjustable parameter names
      :rtype: ['str`]

      .. note:: if `LinearAnalysis.pst` is `None`, returns `LinearAnalysis.jco.col_names`


   .. method:: jco(self)
      :property:

      the jacobian matrix attribute

      :returns: the jacobian matrix attribute
      :rtype: `pyemu.Jco`


   .. method:: predictions(self)
      :property:

      the prediction (aka forecast) sentivity vectors attribute

      :returns: a matrix of prediction sensitivity vectors (column wise)
      :rtype: `pyemu.Matrix`


   .. method:: predictions_iter(self)
      :property:

      prediction sensitivity vectors iterator

      :returns: iterator on prediction sensitivity vectors (matrix)
      :rtype: `iterator`

      .. note:: this is used for processing huge numbers of predictions


   .. method:: forecasts_iter(self)
      :property:

      forecast (e.g. prediction) sensitivity vectors iterator

      :returns: iterator on forecasts (e.g. predictions) sensitivity vectors (matrix)
      :rtype: `iterator`

      .. note::

         This is used for processing huge numbers of predictions
         
         This is a synonym for LinearAnalysis.predictions_iter()


   .. method:: forecasts(self)
      :property:

      the forecast sentivity vectors attribute

      :returns: a matrix of forecast (prediction) sensitivity vectors (column wise)
      :rtype: `pyemu.Matrix`


   .. method:: pst(self)
      :property:

      the pst attribute

      :returns: the pst attribute
      :rtype: `pyemu.Pst`


   .. method:: fehalf(self)
      :property:

      Karhunen-Loeve scaling matrix attribute.

      :returns: the Karhunen-Loeve scaling matrix based on the prior
                parameter covariance matrix
      :rtype: `pyemu.Matrix`


   .. method:: qhalf(self)
      :property:

      square root of the cofactor matrix attribute. Create the attribute if
      it has not yet been created

      :returns: square root of the cofactor matrix
      :rtype: `pyemu.Matrix`


   .. method:: qhalfx(self)
      :property:

      half normal matrix attribute.

      :returns: half normal matrix attribute
      :rtype: `pyemu.Matrix`


   .. method:: xtqx(self)
      :property:

      normal matrix attribute.

      :returns: normal matrix attribute
      :rtype: `pyemu.Matrix`


   .. method:: mle_covariance(self)
      :property:

      maximum likelihood parameter covariance matrix.

      :returns: maximum likelihood parameter covariance matrix
      :rtype: `pyemu.Matrix`


   .. method:: prior_parameter(self)
      :property:

      prior parameter covariance matrix

      :returns: prior parameter covariance matrix
      :rtype: `pyemu.Cov`


   .. method:: prior_forecast(self)
      :property:

      prior forecast (e.g. prediction) variances

      :returns: a dictionary of forecast name, prior variance pairs
      :rtype: `dict`


   .. method:: mle_parameter_estimate(self)
      :property:

      maximum likelihood parameter estimate.

      :returns: the maximum likelihood parameter estimates
      :rtype: `pandas.Series`


   .. method:: prior_prediction(self)
      :property:

      prior prediction (e.g. forecast) variances

      :returns: a dictionary of prediction name, prior variance pairs
      :rtype: `dict`


   .. method:: apply_karhunen_loeve_scaling(self)

      apply karhuene-loeve scaling to the jacobian matrix.

      .. note::

         This scaling is not necessary for analyses using Schur's
         complement, but can be very important for error variance
         analyses.  This operation effectively transfers prior knowledge
         specified in the parcov to the jacobian and reset parcov to the
         identity matrix.


   .. method:: clean(self)

      drop regularization and prior information observation from the jco


   .. method:: reset_pst(self, arg)

      reset the LinearAnalysis.pst attribute

      :param arg: the value to assign to the pst attribute
      :type arg: `str` or `pyemu.Pst`


   .. method:: reset_parcov(self, arg=None)

      reset the parcov attribute to None

      :param arg: the value to assign to the parcov
                  attribute.  If None, the private __parcov attribute is cleared
                  but not reset
      :type arg: `str` or `pyemu.Matrix`


   .. method:: reset_obscov(self, arg=None)

      reset the obscov attribute to None

      :param arg: the value to assign to the obscov
                  attribute.  If None, the private __obscov attribute is cleared
                  but not reset
      :type arg: `str` or `pyemu.Matrix`


   .. method:: drop_prior_information(self)

      drop the prior information from the jco and pst attributes


   .. method:: get(self, par_names=None, obs_names=None, astype=None)

      method to get a new LinearAnalysis class using a
      subset of parameters and/or observations

      :param par_names: par names for new object
      :type par_names: [`'str`]
      :param obs_names: obs names for new object
      :type obs_names: [`'str`]
      :param astype: type to
                     cast the new object.  If None, return type is
                     same as self
      :type astype: `pyemu.Schur` or `pyemu.ErrVar`

      :returns: new instance
      :rtype: `LinearAnalysis`


   .. method:: adjust_obscov_resfile(self, resfile=None)

      reset the elements of obscov by scaling the implied weights
      based on the phi components in res_file so that the total phi
      is equal to the number of non-zero weights.

      :param resfile: residual file to use.  If None, residual
                      file with case name is sought. default is None
      :type resfile: `str`

      .. note:: calls `pyemu.Pst.adjust_weights_resfile()`


   .. method:: get_par_css_dataframe(self)

      get a dataframe of composite scaled sensitivities.  Includes both
      PEST-style and Hill-style.

      :returns: a dataframe of parameter names, PEST-style and
                Hill-style composite scaled sensitivity
      :rtype: `pandas.DataFrame`


   .. method:: get_cso_dataframe(self)

      get a dataframe of composite observation sensitivity, as returned by PEST in the
      seo file.

      :returns: dataframe of observation names and composite observation
                sensitivity
      :rtype: `pandas.DataFrame`

      .. note::

         That this formulation deviates slightly from the PEST documentation in that the
         values are divided by (npar-1) rather than by (npar).
         
         The equation is cso_j = ((Q^1/2*J*J^T*Q^1/2)^1/2)_jj/(NPAR-1)


   .. method:: get_obs_competition_dataframe(self)

      get the observation competition stat a la PEST utility

      :returns: a dataframe of observation names by
                observation names with values equal to the PEST
                competition statistic
      :rtype: `pandas.DataFrame`



