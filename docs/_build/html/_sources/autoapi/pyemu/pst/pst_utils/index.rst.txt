:mod:`pyemu.pst.pst_utils`
==========================

.. py:module:: pyemu.pst.pst_utils

.. autoapi-nested-parse::

   Various PEST(++) control file peripheral operations



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pyemu.pst.pst_utils.InstructionFile



Functions
~~~~~~~~~

.. autoapisummary::

   pyemu.pst.pst_utils.SFMT
   pyemu.pst.pst_utils.str_con
   pyemu.pst.pst_utils.read_resfile
   pyemu.pst.pst_utils.res_from_en
   pyemu.pst.pst_utils.read_parfile
   pyemu.pst.pst_utils.write_parfile
   pyemu.pst.pst_utils.parse_tpl_file
   pyemu.pst.pst_utils.write_input_files
   pyemu.pst.pst_utils._write_chunk_to_template
   pyemu.pst.pst_utils.write_to_template
   pyemu.pst.pst_utils._get_marker_indices
   pyemu.pst.pst_utils.parse_ins_file
   pyemu.pst.pst_utils._parse_ins_string
   pyemu.pst.pst_utils._populate_dataframe
   pyemu.pst.pst_utils.generic_pst
   pyemu.pst.pst_utils.try_process_output_file
   pyemu.pst.pst_utils.try_process_output_pst
   pyemu.pst.pst_utils._try_run_inschek
   pyemu.pst.pst_utils.get_phi_comps_from_recfile
   pyemu.pst.pst_utils.res_from_obseravtion_data
   pyemu.pst.pst_utils.clean_missing_exponent
   pyemu.pst.pst_utils.csv_to_ins_file
   pyemu.pst.pst_utils.process_output_files


.. data:: max_colwidth
   :annotation: = 100

   

.. function:: SFMT(item)


.. data:: SFMT_LONG
   

   

.. data:: IFMT
   

   

.. data:: FFMT
   

   

.. function:: str_con(item)


.. data:: pst_config
   

   

.. function:: read_resfile(resfile)

   load a PEST-style residual file into a pandas.DataFrame

   :param resfile: path and name of an existing residual file
   :type resfile: `str`

    Returns:
        `pandas.DataFrame`: a dataframe of info from the residuals file.
        Column names are the names from the residuals file: "name", "group",
        "measured", "modelled" (with two "L"s), "residual", "weight".

    Example::

        df = pyemu.pst_utils.read_resfile("my.res")
        df.residual.plot(kind="hist")



.. function:: res_from_en(pst, enfile)

   load ensemble results from PESTPP-IES into a PEST-style
   residuals `pandas.DataFrame`

   :param enfile: CSV-format ensemble file name
   :type enfile: `str`

   :returns: a dataframe with the same columns as a
             residual dataframe (a la `pst_utils.read_resfile()`)
   :rtype: `pandas.DataFrame`

   .. note::

      If a "base" realization is found in the ensemble, it is used
      as the "modelled" column in the residuals dataframe.  Otherwise,
      the mean of the ensemble is used as "modelled"

   Example::

       df = pyemu.pst_utils.res_from_en("my.0.obs.csv")
       df.residual.plot(kind="hist")


.. function:: read_parfile(parfile)

   load a PEST-style parameter value file into a pandas.DataFrame

   :param parfile: path and name of existing parameter file
   :type parfile: `str`

   :returns: a dataframe with columns of "parnme", "parval1",
             "scale" and "offset"
   :rtype: `pandas.DataFrame`

   Example::

       df = pyemu.pst_utils.read_parfile("my.par1")


.. function:: write_parfile(df, parfile)

   write a PEST-style parameter file from a dataframe

   :param df: a dataframe with column names
              that correspond to the entries in the parameter data
              section of the pest control file
   :type df: `pandas.DataFrame`
   :param parfile: name of the parameter file to write
   :type parfile: `str`

   Example::

       pyemu.pst_utils.write_parfile(pst.parameter_data,"my.par")


.. function:: parse_tpl_file(tpl_file)

   parse a PEST-style template file to get the parameter names

   Args:
   tpl_file (`str`): path and name of a template file

   :returns: list of parameter names found in `tpl_file`
   :rtype: [`str`]

   Example::

       par_names = pyemu.pst_utils.parse_tpl_file("my.tpl")


.. function:: write_input_files(pst, pst_path='.')

   write parameter values to model input files

   :param pst: a Pst instance
   :type pst: `pyemu.Pst`
   :param pst_path: the path to where the control file and template
                    files reside.  Default is '.'.
   :type pst_path: `str`

   .. note::

      This function uses template files with the current parameter         values (stored in `pst.parameter_data.parval1`).
      
      This function uses multiprocessing - one process per template file
      
      This is a simple implementation of what PEST does.  It does not
      handle all the special cases, just a basic function...user beware


.. function:: _write_chunk_to_template(chunk, parvals, pst_path)


.. function:: write_to_template(parvals, tpl_file, in_file)

   write parameter values to a model input file using
   the corresponding template file

   :param parvals: a container of parameter names and values.  Can
                   also be a `pandas.Series`
   :type parvals: `dict`
   :param tpl_file: path and name of a template file
   :type tpl_file: `str`
   :param in_file: path and name of model input file to write
   :type in_file: `str`

   Examples::

       pyemu.pst_utils.write_to_template(par.parameter_data.parval1,
                                         "my.tpl","my.input")


.. function:: _get_marker_indices(marker, line)

   method to find the start and end parameter markers
   on a template file line.  Used by write_to_template()


.. function:: parse_ins_file(ins_file)

   parse a PEST-style instruction file to get observation names

   :param ins_file: path and name of an existing instruction file
   :type ins_file: `str`

   :returns: a list of observation names found in `ins_file`
   :rtype: [`str`]

   .. note::

      This is a basic function for parsing instruction files to
      look for observation names.

   Example::

       obs_names = pyemu.pst_utils.parse_ins_file("my.ins")


.. function:: _parse_ins_string(string)

   split up an instruction file line to get the observation names


.. function:: _populate_dataframe(index, columns, default_dict, dtype)

   helper function to populate a generic Pst dataframe attribute.

   .. note:: This function is called as part of constructing a generic Pst instance


.. function:: generic_pst(par_names=['par1'], obs_names=['obs1'], addreg=False)

   generate a generic pst instance.

   :param par_names: parameter names to include in the new
                     `pyemu.Pst`.  Default is ["par2"].
   :type par_names: [`str`], optional
   :param obs_names: observation names to include in the new
                     `pyemu.Pst`.  Default is ["obs1"].
   :type obs_names: [`str`], optional
   :param addreg: flag to add zero-order Tikhonov prior information
                  equations to the new control file
   :type addreg: `bool`

   :returns: a new control file instance. This instance does not have
             all the info needed to run, but is a placeholder that can then be
             filled in later.
   :rtype: `pyemu.Pst`

   Example::

       par_names = ["par1","par2"]
       obs_names = ["obs1","obs2"]
       pst = pyemu.pst_utils.generic_pst(par_names,obs_names]


.. function:: try_process_output_file(ins_file, output_file=None)

   attempt to process a model output file using a PEST-style instruction file

   :param ins_file: path and name of an instruction file
   :type ins_file: `str`
   :param output_file: path and name of existing model
                       output file to process.  If `None`, `ins_file.replace(".ins","")`
                       is used.  Default is None.
   :type output_file: `str`,optional

   :returns: a dataframe of observation name and simulated outputs
             extracted from `output_file`.
   :rtype: `pandas.DataFrame`

   .. note::

      If an exception is raised when processing the output file, the exception
      is echoed to the screen and `None` is returned.

   Example::

       df = pyemu.pst_utils.try_process_output_file("my.ins","my.output")


.. function:: try_process_output_pst(pst)

   attempt to process each instruction file, model output
   file pair in a `pyemu.Pst`.

   :param pst: a control file instance
   :type pst: `pyemu.Pst`

   :returns: a dataframe of observation names and simulated outputs
             extracted from model output files.
   :rtype: `pandas.DataFrame`

   .. note::

      This function first tries to process the output files using the
      InstructionFile class,  If that failes, then it tries to run
      INSCHEK. If an instructionfile is processed successfully,
      the extract simulated values are used to populate the
      `pst.observation_data.obsval` attribute.


.. function:: _try_run_inschek(ins_file, out_file, cwd='.')

   try to run inschek and load the resulting obf file


.. function:: get_phi_comps_from_recfile(recfile)

   read the phi components from a record file by iteration

   :param recfile: pest record file name
   :type recfile: `str`

   :returns: nested dictionary of iteration number, {group,contribution}
   :rtype: `dict`

   .. note::

      It is really poor form to use the record file in this way.  Please only
      use this as a last resort!


.. function:: res_from_obseravtion_data(observation_data)

   create a PEST-style residual dataframe filled with np.NaN for
   missing information

   :param observation_data: the "* observation data"
                            `pandas.DataFrame` from `pyemu.Pst.observation_data`
   :type observation_data: `pandas.DataFrame`

   :returns: a dataframe with the same columns as the
             residual dataframe ("name","group","measured","modelled",
             "residual","weight").
   :rtype: `pandas.DataFrame`


.. function:: clean_missing_exponent(pst_filename, clean_filename='clean.pst')

   fixes the issue where some terrible fortran program may have
   written a floating point format without the 'e' - like 1.0-3, really?!

   :param pst_filename: the pest control file
   :type pst_filename: `str`
   :param clean_filename: the new pest control file to write.
                          Default is "clean.pst"
   :type clean_filename: `str`, optional


.. function:: csv_to_ins_file(csv_filename, ins_filename=None, only_cols=None, only_rows=None, marker='~', includes_header=True, includes_index=True, prefix='', longnames=False, head_lines_len=0, sep=',', gpname=False)

   write a PEST-style instruction file from an existing CSV file

   :param csv_filename: path and name of existing CSV file
   :type csv_filename: `str`
   :param ins_filename: path and name of the instruction
                        file to create.  If `None`, then `csv_filename`+".ins" is used.
                        Default is `None`.
   :type ins_filename: `str`, optional
   :param only_cols: list of columns to add observations for in the
                     resulting instruction file. If `None`, all columns are used.
   :type only_cols: [`str`]
   :param only_rows: list of rows to add observations for in the
                     resulting instruction file. If `None`, all rows are used.
   :type only_rows: [`str`]
   :param marker: the PEST instruction marker to use.  Default is "~"
   :type marker: `str`
   :param includes_header: flag to indicate `csv_filename` includes a
                           header row as the first row.  Default is True.
   :type includes_header: `bool`
   :param includes_index: lag to indicate `csv_filename` includes a
                          index column as the first column.  Default is True.
   :type includes_index: `bool`
   :param prefix: a prefix to prepend to observation names.
                  Default is ""
   :type prefix: `str`, optional
   :param gpname: Optional PEST group name for columns
   :type gpname: `str` or [`str`]

   :returns: a dataframe of observation names and values found in
             `csv_filename`
   :rtype: `pandas.DataFrame`

   .. note::

      resulting observation names in `ins_filename` are a combiation of index and
      header values.


.. py:class:: InstructionFile(ins_filename, pst=None)

   Bases: :class:`object`

   class for handling instruction files.

   :param ins_filename: path and name of an existing instruction file
   :type ins_filename: `str`
   :param pst: Pst instance - used for checking that instruction file is
               compatible with the control file (e.g. no duplicates)
   :type pst: `pyemu.Pst`, optional

   Example::

       i = InstructionFile("my.ins")
       df = i.read_output_file("my.output")

   .. method:: obs_name_set(self)
      :property:


   .. method:: read_ins_file(self)

      read the instruction and do some minimal error checking.

      .. note:: This is called by the constructor


   .. method:: throw_ins_warning(self, message, lcount=None)

      throw a verbose PyemuWarning

      :param message: the warning message
      :type message: `str`
      :param lcount: warning line number.  If None, self._ins_linecount is used
      :type lcount: `int`, optional


   .. method:: throw_ins_error(self, message, lcount=None)

      throw a verbose instruction file error

      :param message: the error message
      :type message: `str`
      :param lcount: error line number.  If None, self._ins_linecount is used
      :type lcount: `int`, optional


   .. method:: throw_out_error(self, message, lcount=None)

      throw a verbose output file error

      :param message: the error message
      :type message: `str`
      :param lcount: error line number.  If None, self._ins_linecount is used
      :type lcount: `int`, optional


   .. method:: read_output_file(self, output_file)

      process a model output file using  `InstructionFile.instruction_set`

      :param output_file: path and name of existing output file
      :type output_file: `str`

      :returns: a dataframe with observation names and simulated values
                extracted from `output_file`
      :rtype: `pd.DataFrame`


   .. method:: _execute_ins_line(self, ins_line, ins_lcount)

      private method to process output file lines with an instruction line



   .. method:: _readline_ins(self)

      consolidate private method to read the next instruction file line.  Casts to lower and splits
      on whitespace


   .. method:: _readline_output(self)

      consolidate private method to read the next output file line.  Casts to lower




.. function:: process_output_files(pst, pst_path='.')

   helper function to process output files using the
     InstructionFile class

   :param pst: control file instance
   :type pst: `pyemu.Pst`
   :param pst_path: path to instruction and output files to append to the front
                    of the names in the Pst instance
   :type pst_path: `str`

    Returns:
        `pd.DataFrame`: dataframe of observation names and simulated values
        extracted from the model output files listed in `pst`

    Example::

        pst = pyemu.Pst("my.pst")
        df = pyemu.pst_utils.process_output_files(pst)




