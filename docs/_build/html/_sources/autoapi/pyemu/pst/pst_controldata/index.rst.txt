:mod:`pyemu.pst.pst_controldata`
================================

.. py:module:: pyemu.pst.pst_controldata

.. autoapi-nested-parse::

   This module contains several class definitions for obseure parts of the
   PEST control file: `ControlData` ('* control data'), `RegData` ('* regularization')
   and `SvdData` ('* singular value decomposition').  These
   classes are automatically created and appended to `Pst` instances;
   users shouldn't need to deal with these classes explicitly



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pyemu.pst.pst_controldata.RegData
   pyemu.pst.pst_controldata.SvdData
   pyemu.pst.pst_controldata.ControlData



.. data:: max_colwidth
   :annotation: = 100

   

.. data:: SFMT
   

   lambda function for string formatting `str` types into 20-char widths


.. data:: SFMT_LONG
   

   lambda function for string formatting `str` types into 50-char widths


.. data:: IFMT
   

   lambda function for string formatting `int` types into 10-char widths


.. data:: FFMT
   

   lambda function for string formatting `float` types into 15-char widths


.. data:: CONTROL_DEFAULT_LINES
   

   

.. data:: CONTROL_VARIABLE_LINES
   

   

.. data:: REG_VARIABLE_LINES
   

   

.. data:: REG_DEFAULT_LINES
   

   

.. py:class:: RegData

   Bases: :class:`object`

   an object that encapsulates the regularization section
   of the PEST control file

   .. method:: write(self, f)

      write the regularization section to an open
      file handle

      :param f: open file handle for writing
      :type f: `file handle`


   .. method:: write_keyword(self, f)

      write the regularization section to an open
      file handle using the keyword-style format

      :param f: open file handle for writing
      :type f: `file handle`



.. py:class:: SvdData(**kwargs)

   Bases: :class:`object`

   encapsulates the singular value decomposition
   section of the PEST control file

   :param kwargs: optional keyword arguments
   :type kwargs: `dict`

   .. method:: write_keyword(self, f)

      write an SVD section to a file handle using
      keyword-style format

              Args:
                  f (`file handle`): open file handle for writing



   .. method:: write(self, f)

      write an SVD section to a file handle

      :param f: open file handle for writing
      :type f: `file handle`


   .. method:: parse_values_from_lines(self, lines)

      parse values from lines of the SVD section of
      a PEST control file

      :param lines: the raw ASCII lines from the control file
      :type lines: [`strs`]



.. py:class:: ControlData

   Bases: :class:`object`

   an object that encapsulates the control data section
    of the PEST control file

   .. rubric:: Notes

   This class works hard to protect the variables in the control data section.
   It type checks attempts to change values to make sure the type being passed
   matches the expected type of the attribute.

   .. method:: __setattr__(self, key, value)

      Implement setattr(self, name, value).


   .. method:: __getattr__(self, item)


   .. method:: get_dataframe()
      :staticmethod:

      get a generic (default) control section as a dataframe

      :returns: a dataframe of control data information
      :rtype: `pandas.DataFrame`


   .. method:: _parse_value(value)
      :staticmethod:


   .. method:: parse_values_from_lines(self, lines, iskeyword=False)

      cast the string lines for a pest control file into actual inputs

      :param lines: raw ASCII lines from pest control file
      :type lines: [`str`]


   .. method:: copy(self)


   .. method:: formatted_values(self)
      :property:

      list the entries and current values in the control data section

      :returns: formatted_values for the control data entries
      :rtype: pandas.Series


   .. method:: write_keyword(self, f)

      write the control data entries to an open file handle
      using keyword-style format.

      :param f: open file handle to write to
      :type f: file handle

      .. rubric:: Notes

      only writes values that have been accessed since instantiation


   .. method:: write(self, f)

      write control data section to a file

      :param f: open file handle to write to
      :type f: file handle



