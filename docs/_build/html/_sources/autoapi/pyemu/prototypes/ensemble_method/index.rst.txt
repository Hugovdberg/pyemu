:mod:`pyemu.prototypes.ensemble_method`
=======================================

.. py:module:: pyemu.prototypes.ensemble_method

.. autoapi-nested-parse::

   A base class for developing prototype ensemble methods



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pyemu.prototypes.ensemble_method.EnsembleMethod



.. py:class:: EnsembleMethod(pst, parcov=None, obscov=None, num_workers=0, use_approx_prior=True, submit_file=None, verbose=False, port=4004, worker_dir='template')

   Bases: :class:`object`

   Base class for ensemble-type methods.  Should not be instantiated directly

   :param pst: a control file instance or filename
   :type pst: pyemu.Pst or str
   :param parcov: a prior parameter covariance matrix or filename. If None,
                  parcov is constructed from parameter bounds (diagonal)
   :type parcov: pyemu.Cov or str
   :param obscov: a measurement noise covariance matrix or filename. If None,
                  obscov is constructed from observation weights.
   :type obscov: pyemu.Cov or str
   :param num_workers: number of workers to use in (local machine) parallel evaluation of the parmaeter
                       ensemble.  If 0, serial evaluation is used.  Ignored if submit_file is not None
   :type num_workers: int
   :param submit_file: the name of a HTCondor submit file.  If not None, HTCondor is used to
                       evaluate the parameter ensemble in parallel by issuing condor_submit
                       as a system command
   :type submit_file: str
   :param port: the TCP port number to communicate on for parallel run management
   :type port: int
   :param worker_dir: path to a directory with a complete set of model files and PEST
                      interface files
   :type worker_dir: str

   .. method:: initialize(self, *args, **kwargs)


   .. method:: _calc_delta(self, ensemble, scaling_matrix=None)

      calc the scaled  ensemble differences from the mean


   .. method:: _calc_obs(self, parensemble)


   .. method:: _load_obs_ensemble(self, filename)


   .. method:: _get_master_thread(self)


   .. method:: _calc_obs_condor(self, parensemble)


   .. method:: _calc_obs_local(self, parensemble)

      propagate the ensemble forward using sweep.


   .. method:: update(self, lambda_mults=[1.0], localizer=None, run_subset=None, use_approx=True)



