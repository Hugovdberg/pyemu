:mod:`pyemu.prototypes.da`
==========================

.. py:module:: pyemu.prototypes.da


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pyemu.prototypes.da.EnsembleKalmanFilter
   pyemu.prototypes.da.Assimilator



.. py:class:: EnsembleKalmanFilter(pst, parcov=None, obscov=None, num_workers=0, submit_file=None, verbose=False, port=4004, worker_dir='template')

   Bases: :class:`pyemu.prototypes.ensemble_method.EnsembleMethod`

   Base class for ensemble-type methods.  Should not be instantiated directly

   :param pst: a control file instance or filename
   :type pst: pyemu.Pst or str
   :param parcov: a prior parameter covariance matrix or filename. If None,
                  parcov is constructed from parameter bounds (diagonal)
   :type parcov: pyemu.Cov or str
   :param obscov: a measurement noise covariance matrix or filename. If None,
                  obscov is constructed from observation weights.
   :type obscov: pyemu.Cov or str
   :param num_workers: number of workers to use in (local machine) parallel evaluation of the parmaeter
                       ensemble.  If 0, serial evaluation is used.  Ignored if submit_file is not None
   :type num_workers: int
   :param submit_file: the name of a HTCondor submit file.  If not None, HTCondor is used to
                       evaluate the parameter ensemble in parallel by issuing condor_submit
                       as a system command
   :type submit_file: str
   :param port: the TCP port number to communicate on for parallel run management
   :type port: int
   :param worker_dir: path to a directory with a complete set of model files and PEST
                      interface files
   :type worker_dir: str

   .. method:: initialize(self, num_reals=1, enforce_bounds='reset', parensemble=None, obsensemble=None, restart_obsensemble=None)

      Initialize.  Depending on arguments, draws or loads
      initial parameter observations ensembles and runs the initial parameter
      ensemble

      :param num_reals: the number of realizations to draw.  Ignored if parensemble/obsensemble
                        are not None
      :type num_reals: int
      :param enforce_bounds: how to enfore parameter bound transgression.  options are
                             reset, drop, or None
      :type enforce_bounds: str
      :param parensemble: a parameter ensemble or filename to use as the initial
                          parameter ensemble.  If not None, then obsenemble must not be
                          None
      :type parensemble: pyemu.ParameterEnsemble or str
      :param obsensemble: an observation ensemble or filename to use as the initial
                          observation ensemble.  If not None, then parensemble must
                          not be None
      :type obsensemble: pyemu.ObservationEnsemble or str
      :param restart_obsensemble: an observation ensemble or filename to use as an
                                  evaluated observation ensemble.  If not None, this will skip the initial
                                  parameter ensemble evaluation - user beware!
      :type restart_obsensemble: pyemu.ObservationEnsemble or str


   .. method:: forecast(self, parensemble=None)

      for the enkf formulation, this simply moves the ensemble forward by running the model
      once for each realization


   .. method:: analysis(self)


   .. method:: analysis_evensen(self)

      Ayman here!!!.  some peices that may be useful:
      self.parcov = parameter covariance matrix
      self.obscov = obseravtion noise covariance matrix
      self.parensmeble = current parameter ensemble
      self.obsensemble = current observation (model output) ensemble

      the ensemble instances have two useful methods:
      Ensemble.covariance_matrix() - get an empirical covariance matrix
      Ensemble.get_deviations() - get an ensemble of deviations around the mean vector

      If you use pyemu.Matrix (and pyemu.Cov) for the linear algebra parts, you don't
      have to worry about the alignment of the matrices (pyemu will dynamically reorder/align
      based in row and/or col names).  The Matrix instance also has a .inv for the inverse
      as well as .s, .u and .v for the SVD components (gets dynamically evaluated if you try to
      access these attributes)



      Following Evensen 2003..


   .. method:: update(self)

      update performs the analysis, then runs the forecast using the updated self.parensemble.
      This can be called repeatedly to iterate...



.. py:class:: Assimilator(type='Smoother', iterate=False, pst=None, mode='stochastic', options={})

   .. method:: forcast(self)

      This function implements (1) generation of random ensemble for parameters, (2) forward model runs.

      :return:


   .. method:: generate_priors(self)

      Use parameters dataframe from Pst to generate prior realizations
      :return:


   .. method:: model_evalutions(self)


   .. method:: update(self, Pst)

      Solve the anlaysis step
      Xa = Xf + C'H(H'CH + R) (do - df)


   .. method:: run(self)

      :return:


   .. method:: smoother(self, pst)


   .. method:: enkf(self)

      Loop over time windows and apply da
      :return:


   .. method:: enks(self, pst)

      Similiar to EnkF ---  wait???


   .. method:: model_temporal_evolotion(self, time_index, cycle_files)

      - The function prepares the model for this time cycle
       - Any time-dependant forcing should be handled here. This includes temporal stresses, boundary conditions, and
       initial conditions.
       - Two options are available (1) template files to update input parameters
                                   (2) use results from previous cycle to update input files using instruction
                                   files.
                                   (3) the user must prepare a pair of files : .tpl(or .ins) and corresponding file to change
      :param time_index:
      :return:



.. data:: sm
   

   

