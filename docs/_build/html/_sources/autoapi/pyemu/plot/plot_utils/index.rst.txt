:mod:`pyemu.plot.plot_utils`
============================

.. py:module:: pyemu.plot.plot_utils

.. autoapi-nested-parse::

   Plotting functions for various PEST(++) and pyemu operations



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   pyemu.plot.plot_utils.plot_summary_distributions
   pyemu.plot.plot_utils.gaussian_distribution
   pyemu.plot.plot_utils.pst_helper
   pyemu.plot.plot_utils.phi_progress
   pyemu.plot.plot_utils._get_page_axes
   pyemu.plot.plot_utils.res_1to1
   pyemu.plot.plot_utils.plot_id_bar
   pyemu.plot.plot_utils.res_phi_pie
   pyemu.plot.plot_utils.pst_prior
   pyemu.plot.plot_utils.ensemble_helper
   pyemu.plot.plot_utils.ensemble_change_summary
   pyemu.plot.plot_utils._process_ensemble_arg
   pyemu.plot.plot_utils.ensemble_res_1to1
   pyemu.plot.plot_utils.plot_jac_test


.. data:: font
   

   

.. data:: figsize
   :annotation: = [8, 10.5]

   

.. data:: abet
   

   

.. function:: plot_summary_distributions(df, ax=None, label_post=False, label_prior=False, subplots=False, figsize=(11, 8.5), pt_color='b')

   helper function to plot gaussian distrbutions from prior and posterior
   means and standard deviations

   :param df: a dataframe and csv file.  Must have columns named:
              'prior_mean','prior_stdev','post_mean','post_stdev'.  If loaded
              from a csv file, column 0 is assumed to tbe the index
   :type df: `pandas.DataFrame`
   :param ax: If None, and not subplots, then one is created
              and all distributions are plotted on a single plot
   :type ax: `atplotlib.pyplot.axis`
   :param label_post: flag to add text labels to the peak of the posterior
   :type label_post: `bool`
   :param label_prior: flag to add text labels to the peak of the prior
   :type label_prior: `bool`
   :param subplots: flag to use subplots.  If True, then 6 axes per page
                    are used and a single prior and posterior is plotted on each
   :type subplots: `bool`
   :param figsize: matplotlib figure size
   :type figsize: `tuple`

   :returns:

             - **[`matplotlib.figure`]**: list of figures
             - **[`matplotlib.axis`]**: list of axes
   :rtype: tuple containing

   .. note::

      This is useful for demystifying FOSM results
      
      if subplots is False, a single axis is returned

   Example::

       import matplotlib.pyplot as plt
       import pyemu
       pyemu.plot_utils.plot_summary_distributions("pest.par.usum.csv")
       plt.show()


.. function:: gaussian_distribution(mean, stdev, num_pts=50)

   get an x and y numpy.ndarray that spans the +/- 4
   standard deviation range of a gaussian distribution with
   a given mean and standard deviation. useful for plotting

   :param mean: the mean of the distribution
   :type mean: `float`
   :param stdev: the standard deviation of the distribution
   :type stdev: `float`
   :param num_pts: the number of points in the returned ndarrays.
                   Default is 50
   :type num_pts: `int`

   :returns:

             - **numpy.ndarray**: the x-values of the distribution
             - **numpy.ndarray**: the y-values of the distribution
   :rtype: tuple containing


.. function:: pst_helper(pst, kind=None, **kwargs)

   `pyemu.Pst` plot helper - takes the
   handoff from `pyemu.Pst.plot()`

   :param kind: the kind of plot to make
   :type kind: `str`
   :param \*\*kargs: keyword arguments to pass to the
                     plotting function and ultimately to `matplotlib`
   :type \*\*kargs: `dict`

   :returns: usually a combination of `matplotlib.figure` (s) and/or
             `matplotlib.axis` (s)
   :rtype: varies


.. function:: phi_progress(pst, logger=None, filename=None, **kwargs)

   make plot of phi vs number of model runs - requires
   available  ".iobj" file generated by a PESTPP-GLM run.

   :param pst: a control file instance
   :type pst: `pyemu.Pst`
   :param logger: if None, a generic one is created.  Default is None
   :type logger: `pyemu.Logger`
   :param filename: PDF filename to save figures to.  If None, figures
                    are returned.  Default is None
   :type filename: `str`
   :param kwargs: optional keyword args to pass to plotting function
   :type kwargs: `dict`

   :returns: the axis the plot was made on
   :rtype: `matplotlib.axis`

   Example::

       import matplotlib.pyplot as plt
       import pyemu
       pst = pyemu.Pst("my.pst")
       pyemu.plot_utils.phi_progress(pst)
       plt.show()


.. function:: _get_page_axes(count=nr * nc)


.. function:: res_1to1(pst, logger=None, filename=None, plot_hexbin=False, histogram=False, **kwargs)

   make 1-to-1 plots and also observed vs residual by observation group

   :param pst: a control file instance
   :type pst: `pyemu.Pst`
   :param logger: if None, a generic one is created.  Default is None
   :type logger: `pyemu.Logger`
   :param filename: PDF filename to save figures to.  If None, figures
                    are returned.  Default is None
   :type filename: `str`
   :param hexbin: flag to use the hexbinning for large numbers of residuals.
                  Default is False
   :type hexbin: `bool`
   :param histogram: flag to plot residual histograms instead of obs vs residual.
                     Default is False (use `matplotlib.pyplot.scatter` )
   :type histogram: `bool`
   :param kwargs: optional keyword args to pass to plotting function
   :type kwargs: `dict`

   :returns: the axis the plot was made on
   :rtype: `matplotlib.axis`

   Example::

       import matplotlib.pyplot as plt
       import pyemu
       pst = pyemu.Pst("my.pst")
       pyemu.plot_utils.phi_progress(pst)
       plt.show()


.. function:: plot_id_bar(id_df, nsv=None, logger=None, **kwargs)

   Plot a stacked bar chart of identifiability based on
   a the `pyemu.ErrVar.get_identifiability()` dataframe

   :param id_df: dataframe of identifiability
   :type id_df: `pandas.DataFrame`
   :param nsv: number of singular values to consider
   :type nsv: `int`
   :param logger: a logger.  If None, a generic
                  one is created
   :type logger: `pyemu.Logger`, optonal
   :param kwargs: a dict of keyword arguments to pass to the
                  plotting function
   :type kwargs: `dict`

   :returns: the axis with the plot
   :rtype: `matplotlib.Axis`

   Example::

       import pyemu
       pest_obj = pyemu.Pst(pest_control_file)
       ev = pyemu.ErrVar(jco='freyberg_jac.jcb'))
       id_df = ev.get_identifiability_dataframe(singular_value=48)
       pyemu.plot_utils.plot_id_bar(id_df, nsv=12, figsize=(12,4)



.. function:: res_phi_pie(pst, logger=None, **kwargs)

   plot current phi components as a pie chart.

   :param pst: a control file instance with the residual datafrane
               instance available.
   :type pst: `pyemu.Pst`
   :param logger: a logger.  If None, a generic one is created
   :type logger: `pyemu.Logger`
   :param kwargs: a dict of plotting options. Accepts 'include_zero'
                  as a flag to include phi groups with only zero-weight obs (not
                  sure why anyone would do this, but whatevs). Any additional
                  args are passed to `matplotlib`.
   :type kwargs: `dict`

   :returns: the axis with the plot.
   :rtype: `matplotlib.Axis`

   Example::

       import pyemu
       pst = pyemu.Pst("my.pst")
       pyemu.plot_utils.res_phi_pie(pst,figsize=(12,4))


.. function:: pst_prior(pst, logger=None, filename=None, **kwargs)

   helper to plot prior parameter histograms implied by
   parameter bounds. Saves a multipage pdf named <case>.prior.pdf

   :param pst: control file
   :type pst: `pyemu.Pst`
   :param logger: a logger.  If None, a generic one is created.
   :type logger: `pyemu.Logger`
   :param filename: PDF filename to save plots to.
                    If None, return figs without saving.  Default is None.
   :type filename: `str`
   :param kwargs: additional plotting options. Accepts 'grouper' as
                  dict to group parameters on to a single axis (use
                  parameter groups if not passed),'unqiue_only' to only show unique
                  mean-stdev combinations within a given group.  Any additional args
                  are passed to `matplotlib`.
   :type kwargs: `dict`

   :returns: a list of figures created.
   :rtype: [`matplotlib.Figure`]


.. function:: ensemble_helper(ensemble, bins=10, facecolor='0.5', plot_cols=None, filename=None, func_dict=None, sync_bins=True, deter_vals=None, std_window=None, deter_range=False, **kwargs)

   helper function to plot ensemble histograms

   :param ensemble: varies
                    the ensemble argument can be a pandas.DataFrame or derived type or a str, which
                    is treated as a filename.  Optionally, ensemble can be a list of these types or
                    a dict, in which case, the keys are treated as facecolor str (e.g., 'b', 'y', etc).
   :param facecolor: str
                     the histogram facecolor.  Only applies if ensemble is a single thing
   :param plot_cols: enumerable
                     a collection of columns (in form of a list of parameters, or a dict with keys for
                     parsing plot axes and values of parameters) from the ensemble(s) to plot.  If None,
                     (the union of) all cols are plotted. Default is None
   :param filename: str
                    the name of the pdf to create.  If None, return figs without saving.  Default is None.
   :param func_dict: dict
                     a dictionary of unary functions (e.g., `np.log10` to apply to columns.  Key is
                     column name.  Default is None
   :param sync_bins: bool
                     flag to use the same bin edges for all ensembles. Only applies if more than
                     one ensemble is being plotted.  Default is True
   :param deter_vals: dict
                      dict of deterministic values to plot as a vertical line. key is ensemble columnn name
   :param std_window: float
                      the number of standard deviations around the mean to mark as vertical lines.  If None,
                      nothing happens.  Default is None
   :param deter_range: bool
                       flag to set xlims to deterministic value +/- std window.  If True, std_window must not be None.
                       Default is False

   Example::

       pst = pyemu.Pst("my.pst")
       prior = pyemu.ParameterEnsemble.from_binary(pst=pst, filename="prior.jcb")
       post = pyemu.ParameterEnsemble.from_binary(pst=pst, filename="my.3.par.jcb")
       pyemu.plot_utils.ensemble_helper(ensemble={"0.5":prior, "b":post},filename="ensemble.pdf")


.. function:: ensemble_change_summary(ensemble1, ensemble2, pst, bins=10, facecolor='0.5', logger=None, filename=None, **kwargs)

   helper function to plot first and second moment change histograms between two
   ensembles

   :param ensemble1: filename or `pandas.DataFrame` or `pyemu.Ensemble`
   :type ensemble1: varies
   :param ensemble2: filename or `pandas.DataFrame` or `pyemu.Ensemble`
   :type ensemble2: varies
   :param pst: control file
   :type pst: `pyemu.Pst`
   :param facecolor: the histogram facecolor.
   :type facecolor: `str`
   :param filename: the name of the multi-pdf to create. If None, return figs without saving.  Default is None.
   :type filename: `str`

   :returns: a list of figures.  Returns None is
             `filename` is not None
   :rtype: [`matplotlib.Figure`]


.. function:: _process_ensemble_arg(ensemble, facecolor, logger)


.. function:: ensemble_res_1to1(ensemble, pst, facecolor='0.5', logger=None, filename=None, skip_groups=[], base_ensemble=None, **kwargs)

   helper function to plot ensemble 1-to-1 plots sbowing the simulated range

   :param ensemble: the ensemble argument can be a pandas.DataFrame or derived type or a str, which
                    is treated as a fileanme.  Optionally, ensemble can be a list of these types or
                    a dict, in which case, the keys are treated as facecolor str (e.g., 'b', 'y', etc).
   :type ensemble: varies
   :param pst: a control file instance
   :type pst: `pyemu.Pst`
   :param facecolor: the histogram facecolor.  Only applies if `ensemble` is a single thing
   :type facecolor: `str`
   :param filename: the name of the pdf to create. If None, return figs
                    without saving.  Default is None.
   :type filename: `str`
   :param base_ensemble: an optional ensemble argument for the observations + noise ensemble.
                         This will be plotted as a transparent red bar on the 1to1 plot.
   :type base_ensemble: `varies`


.. function:: plot_jac_test(csvin, csvout, targetobs=None, filetype=None, maxoutputpages=1, outputdirectory=None)

   helper function to plot results of the Jacobian test performed using the pest++
   program pestpp-swp.

   :param csvin: name of csv file used as input to sweep, typically developed with
                 static method pyemu.helpers.build_jac_test_csv()
   :type csvin: `str`
   :param csvout: name of csv file with output generated by sweep, both input
                  and output files can be specified in the pest++ control file
                  with pyemu using: pest_object.pestpp_options["sweep_parameter_csv_file"] = jactest_in_file.csv
                  pest_object.pestpp_options["sweep_output_csv_file"] = jactest_out_file.csv
   :type csvout: `str`
   :param targetobs: list of observation file names to plot, each parameter used for jactest can
                     have up to 32 observations plotted per page, throws a warning if more tha
                     10 pages of output are requested per parameter. If none, all observations in
                     the output csv file are used.
   :type targetobs: [`str`]
   :param filetype: file type to store output, if None, plt.show() is called.
   :type filetype: `str`
   :param maxoutputpages: maximum number of pages of output per parameter.  Each page can
                          hold up to 32 observation derivatives.  If value > 10, set it to
                          10 and throw a warning.  If observations in targetobs > 32*maxoutputpages,
                          then a random set is selected from the targetobs list (or all observations
                          in the csv file if targetobs=None).
   :type maxoutputpages: `int`
   :param outputdirectory: directory to store results, if None, current working directory is used.
                           If string is passed, it is joined to the current working directory and
                           created if needed. If os.path is passed, it is used directly.
   :type outputdirectory: `str`

   .. note::

      Used in conjunction with pyemu.helpers.build_jac_test_csv() and sweep to perform
      a Jacobian Test and then view the results. Can generate a lot of plots so easiest
      to put into a separate directory and view the files.


